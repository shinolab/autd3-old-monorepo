cmake_minimum_required(VERSION 3.21)

if(NOT BUILD_EXAMPLES)
  return()
endif()

add_library(autd3_example_common INTERFACE)
target_link_libraries(autd3_example_common INTERFACE autd3::autd3)
if(BUILD_GAIN_HOLO)
  target_link_libraries(autd3_example_common INTERFACE autd3::gain::holo autd3::backend::eigen)
  target_compile_definitions(autd3_example_common INTERFACE BUILD_GAIN_HOLO)
endif()
if(BUILD_MODULATION_AUDIO_FILE)
  target_link_libraries(autd3_example_common INTERFACE autd3::modulation::audio_file)
  target_compile_definitions(autd3_example_common INTERFACE BUILD_MODULATION_AUDIO_FILE)
  target_compile_definitions(autd3_example_common INTERFACE AUTD3_RESOURCE_PATH="${PROJECT_SOURCE_DIR}/examples/resources")
endif()

if(BUILD_LINK_SOEM)
  add_executable(example_soem soem.cpp)
  target_link_libraries(example_soem PRIVATE autd3_example_common autd3::link::soem soem)
  target_compile_definitions(example_soem PRIVATE __STDC_LIMIT_MACROS)
  set_target_properties(example_soem PROPERTIES FOLDER "example")
endif()

if(BUILD_LINK_EMEM)
  add_executable(example_emem emem.cpp)
  target_link_libraries(example_emem PRIVATE autd3_example_common autd3::link::emem)
  set_target_properties(example_emem PROPERTIES FOLDER "example")
endif()

if(BUILD_LINK_TWINCAT)
  if(WIN32)
    add_executable(example_twincat twincat.cpp)
    target_link_libraries(example_twincat PRIVATE autd3_example_common autd3::link::twincat)
    set_target_properties(example_twincat PROPERTIES FOLDER "example")
  endif()
endif()

if(BUILD_LINK_REMOTE_TWINCAT)
  add_executable(example_remote_twincat remote_twincat.cpp)
  target_link_libraries(example_remote_twincat PRIVATE autd3_example_common autd3::link::remote_twincat)
  set_target_properties(example_remote_twincat PROPERTIES FOLDER "example")
endif()

if(BUILD_LINK_REMOTE_SOEM)
  add_executable(example_remote_soem remote_soem.cpp)
  target_link_libraries(example_remote_soem PRIVATE autd3_example_common autd3::link::remote_soem)
  set_target_properties(example_remote_soem PROPERTIES FOLDER "example")
endif()

if(BUILD_GEOMETRY_VIEWER)
  add_executable(example_geometry_viewer geometry_viewer.cpp)
  target_link_libraries(example_geometry_viewer PRIVATE autd3::common autd3::extra::geometry_viewer)
  set_target_properties(example_geometry_viewer PROPERTIES FOLDER "example")
endif()

if(BUILD_SIMULATOR)
  add_executable(example_simulator_server simulator_server.cpp)
  include(${PROJECT_SOURCE_DIR}/cmakes/json.cmake)
  include(${PROJECT_SOURCE_DIR}/cmakes/tinycolormap.cmake)
  target_link_libraries(example_simulator_server PRIVATE autd3::common autd3::extra::simulator nlohmann_json::nlohmann_json tinycolormap)
  set_target_properties(example_simulator_server PROPERTIES FOLDER "example")
endif()

if (BUILD_LINK_SIMULATOR)
  add_executable(example_simulator_client simulator_client.cpp)
  target_link_libraries(example_simulator_client PRIVATE autd3_example_common autd3::link::simulator)
  set_target_properties(example_simulator_client PROPERTIES FOLDER "example")

  add_executable(example_custom_device custom_device.cpp)
  target_link_libraries(example_custom_device PRIVATE autd3_example_common autd3::link::simulator)
  set_target_properties(example_custom_device PROPERTIES FOLDER "example")
endif()

if(BUILD_LINK_REMOTE_SIMULATOR)
  add_executable(example_remote_simulator remote_simulator.cpp)
  target_link_libraries(example_remote_simulator PRIVATE autd3_example_common autd3::link::remote_simulator)
  set_target_properties(example_remote_simulator PROPERTIES FOLDER "example")
endif()

add_executable(example_debug debug.cpp)
target_link_libraries(example_debug PRIVATE autd3_example_common)
set_target_properties(example_debug PROPERTIES FOLDER "example")

add_executable(example_freq_config freq_config.cpp)
target_link_libraries(example_freq_config PRIVATE autd3_example_common)
set_target_properties(example_freq_config PROPERTIES FOLDER "example")
