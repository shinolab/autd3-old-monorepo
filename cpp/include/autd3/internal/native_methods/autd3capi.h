#pragma once

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <cstdint>

namespace autd3::internal::native_methods {

constexpr const uint32_t NUM_TRANS_IN_UNIT = 249;

constexpr const uint32_t NUM_TRANS_IN_X = 18;

constexpr const uint32_t NUM_TRANS_IN_Y = 14;

constexpr const uint32_t FPGA_CLK_FREQ = 163840000;

constexpr const uint32_t FPGA_SUB_CLK_FREQ = 20480000;

constexpr const int32_t ERR = -1;

constexpr const int32_t TRUE = 1;

constexpr const int32_t FALSE = 0;

enum class GainSTMMode : uint8_t {
  PhaseDutyFull = 0,
  PhaseFull = 1,
  PhaseHalf = 2,
};

enum class Level : uint8_t {
  Critical = 0,
  Error = 1,
  Warn = 2,
  Info = 3,
  Debug = 4,
  Trace = 5,
  Off = 6,
};

enum class TransMode : uint8_t {
  Legacy = 0,
  Advanced = 1,
  AdvancedPhase = 2,
};

constexpr const double TRANS_SPACING_MM = 10.16;

constexpr const double DEVICE_HEIGHT = 151.4;

constexpr const double DEVICE_WIDTH = 192.0;

extern "C" {

[[nodiscard]] void* AUTDCreateGeometryBuilder();

void AUTDAddDevice(void* builder, double x, double y, double z, double rz1, double ry, double rz2);

void AUTDAddDeviceQuaternion(void* builder,
                             double x,
                             double y,
                             double z,
                             double qw,
                             double qx,
                             double qy,
                             double qz);

[[nodiscard]] void* AUTDBuildGeometry(void* builder, char *err);

[[nodiscard]] void* AUTDOpenController(void* geometry, void* link, char *err);

[[nodiscard]] bool AUTDClose(void* cnt, char *err);

void AUTDFreeController(void* cnt);

void AUTDSetReadsFPGAInfo(void* cnt, bool value);

void AUTDSetForceFan(void* cnt, bool value);

[[nodiscard]] double AUTDGetSoundSpeed(void* cnt);

void AUTDSetSoundSpeed(void* cnt, double value);

void AUTDSetSoundSpeedFromTemp(void* cnt, double temp, double k, double r, double m);

[[nodiscard]] double AUTDGetTransFrequency(void* cnt, uint32_t idx);

[[nodiscard]] bool AUTDSetTransFrequency(void* cnt, uint32_t idx, double value, char *err);

[[nodiscard]] uint16_t AUTDGetTransCycle(void* cnt, uint32_t idx);

[[nodiscard]] bool AUTDSetTransCycle(void* cnt, uint32_t idx, uint16_t value, char *err);

[[nodiscard]] double AUTDGetWavelength(void* cnt, uint32_t idx);

[[nodiscard]] double AUTDGetAttenuation(void* cnt);

void AUTDSetAttenuation(void* cnt, double value);

[[nodiscard]] bool AUTDGetFPGAInfo(void* cnt, const uint8_t *out, char *err);

[[nodiscard]] uint32_t AUTDNumTransducers(void* cnt);

[[nodiscard]] uint32_t AUTDNumDevices(void* cnt);

void AUTDGeometryCenter(void* cnt, double *x, double *y, double *z);

void AUTDGeometryCenterOf(void* cnt, uint32_t dev_idx, double *x, double *y, double *z);

void AUTDTransPosition(void* cnt, uint32_t tr_idx, double *x, double *y, double *z);

void AUTDTransXDirection(void* cnt, uint32_t tr_idx, double *x, double *y, double *z);

void AUTDTransYDirection(void* cnt, uint32_t tr_idx, double *x, double *y, double *z);

void AUTDTransZDirection(void* cnt, uint32_t tr_idx, double *x, double *y, double *z);

[[nodiscard]] uint16_t AUTDGetTransModDelay(void* cnt, uint32_t tr_idx);

void AUTDSetTransModDelay(void* cnt, uint32_t tr_idx, uint16_t delay);

[[nodiscard]] void* AUTDGetFirmwareInfoListPointer(void* cnt, char *err);

void AUTDGetFirmwareInfo(void* p_info_list,
                         uint32_t idx,
                         char *info,
                         bool *is_valid,
                         bool *is_supported);

void AUTDFreeFirmwareInfoListPointer(void* p_info_list);

void AUTDGetLatestFirmware(char *latest);

[[nodiscard]] void* AUTDGainNull();

[[nodiscard]] void* AUTDGainGrouped();

void AUTDGainGroupedAdd(void* grouped_gain, uint32_t device_id, void* gain);

[[nodiscard]] void* AUTDGainFocus(double x, double y, double z, double amp);

[[nodiscard]]
void* AUTDGainBesselBeam(double x,
                         double y,
                         double z,
                         double nx,
                         double ny,
                         double nz,
                         double theta_z,
                         double amp);

[[nodiscard]] void* AUTDGainPlaneWave(double nx, double ny, double nz, double amp);

[[nodiscard]] void* AUTDGainTransducerTest();

void AUTDGainTransducerTestSet(void* trans_test, uint32_t id, double phase, double amp);

[[nodiscard]] void* AUTDGainCustom(const double *amp, const double *phase, uint64_t size);

void AUTDDeleteGain(void* gain);

[[nodiscard]] void* AUTDModulationStatic(double amp);

[[nodiscard]] void* AUTDModulationSine(uint32_t freq, double amp, double offset);

[[nodiscard]] void* AUTDModulationSineSquared(uint32_t freq, double amp, double offset);

[[nodiscard]] void* AUTDModulationSineLegacy(double freq, double amp, double offset);

[[nodiscard]] void* AUTDModulationSquare(uint32_t freq, double low, double high, double duty);

[[nodiscard]] void* AUTDModulationCustom(const double *amp, uint64_t size, uint32_t freq_div);

[[nodiscard]] uint32_t AUTDModulationSamplingFrequencyDivision(void* m);

void AUTDModulationSetSamplingFrequencyDivision(void* m, uint32_t freq_div);

[[nodiscard]] double AUTDModulationSamplingFrequency(void* m);

void AUTDDeleteModulation(void* m);

[[nodiscard]] void* AUTDFocusSTM();

void AUTDFocusSTMAdd(void* stm, double x, double y, double z, uint8_t shift);

[[nodiscard]] double AUTDFocusSTMSetFrequency(void* stm, double freq);

[[nodiscard]] int32_t AUTDFocusSTMGetStartIdx(void* stm);

[[nodiscard]] int32_t AUTDFocusSTMGetFinishIdx(void* stm);

void AUTDFocusSTMSetStartIdx(void* stm, int32_t idx);

void AUTDFocusSTMSetFinishIdx(void* stm, int32_t idx);

[[nodiscard]] double AUTDFocusSTMFrequency(void* stm);

[[nodiscard]] double AUTDFocusSTMSamplingFrequency(void* stm);

[[nodiscard]] uint32_t AUTDFocusSTMSamplingFrequencyDivision(void* stm);

void AUTDFocusSTMSetSamplingFrequencyDivision(void* stm, uint32_t freq_div);

void AUTDDeleteFocusSTM(void* stm);

[[nodiscard]] void* AUTDGainSTM();

void AUTDGainSTMAdd(void* stm, void* gain);

void AUTDGainSTMSetMode(void* stm, GainSTMMode mode);

[[nodiscard]] double AUTDGainSTMSetFrequency(void* stm, double freq);

[[nodiscard]] int32_t AUTDGainSTMGetStartIdx(void* stm);

[[nodiscard]] int32_t AUTDGainSTMGetFinishIdx(void* stm);

void AUTDGainSTMSetStartIdx(void* stm, int32_t idx);

void AUTDGainSTMSetFinishIdx(void* stm, int32_t idx);

[[nodiscard]] double AUTDGainSTMFrequency(void* stm);

[[nodiscard]] double AUTDGainSTMSamplingFrequency(void* stm);

[[nodiscard]] uint32_t AUTDGainSTMSamplingFrequencyDivision(void* stm);

void AUTDGainSTMSetSamplingFrequencyDivision(void* stm, uint32_t freq_div);

void AUTDDeleteGainSTM(void* stm);

[[nodiscard]] void* AUTDSynchronize();

[[nodiscard]] void* AUTDClear();

[[nodiscard]] void* AUTDUpdateFlags();

[[nodiscard]] void* AUTDStop();

[[nodiscard]] void* AUTDModDelayConfig();

void AUTDDeleteSpecialData(void* special);

[[nodiscard]] void* AUTDCreateSilencer(uint16_t step);

void AUTDDeleteSilencer(void* silencer);

[[nodiscard]] void* AUTDCreateAmplitudes(double amp);

void AUTDDeleteAmplitudes(void* amplitudes);

[[nodiscard]]
int32_t AUTDSend(void* cnt,
                 TransMode mode,
                 void* header,
                 void* body,
                 int64_t timeout_ns,
                 char *err);

[[nodiscard]]
int32_t AUTDSendSpecial(void* cnt,
                        TransMode mode,
                        void* special,
                        int64_t timeout_ns,
                        char *err);

[[nodiscard]] void* AUTDLinkDebug();

[[nodiscard]] void* AUTDLinkDebugLogLevel(void* builder, Level level);

[[nodiscard]]
void* AUTDLinkDebugLogFunc(void* builder,
                           Level level,
                           void* out_func,
                           void* flush_func);

[[nodiscard]] void* AUTDLinkDebugTimeout(void* builder, uint64_t timeout_ns);

[[nodiscard]] void* AUTDLinkDebugBuild(void* builder);

} // extern "C"

} // namespace autd3::internal::native_methods
