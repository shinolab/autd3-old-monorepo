name: build

on:
  push:
    tags-ignore:
      - v*
    branches:
      - 'dev'

jobs:
  build:
    name: build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v3
    - name: setup-msbuild
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v1
    - name: build for Windows x64
      if: matrix.os == 'windows-latest'
      run: |
        cmake -G "Visual Studio 17 2022" -A x64 -B "build" -DBUILD_ALL=ON -DBUILD_BACKEND_CUDA=OFF
        cd build
        msbuild autd3.sln /t:build
    - name: build for Windows ARM
      if: matrix.os == 'windows-latest'
      run: |
        cmake -G "Visual Studio 17 2022" -A ARM64 -B "build_arm" -DBUILD_TARGET=ARM -DBUILD_ALL=ON -DBUILD_BACKEND_CUDA=OFF
        cd build_arm
        msbuild autd3.sln /t:build
    - name: install compile tools
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install g++-arm-linux-gnueabihf g++-aarch64-linux-gnu -y
      shell: bash
    - name: build for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p build && cd build
        cmake .. -DBUILD_ALL=ON -DBUILD_BACKEND_CUDA=OFF
        make -j8
      shell: bash
      env:
        CC: gcc-10
        CXX: g++-10
    - name: build for Linux ARM32
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p build_arm32 && cd build_arm32
        cmake .. -DBUILD_TARGET=ARM32 -DBUILD_ALL=ON -DBUILD_BACKEND_CUDA=OFF
        make -j8
      shell: bash
      env:
        CC: gcc-10
        CXX: g++-10
    - name: build for Linux ARM64
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p build_arm64 && cd build_arm64
        cmake .. -DBUILD_TARGET=ARM64 -DBUILD_ALL=ON -DBUILD_BACKEND_CUDA=OFF
        make -j8
      shell: bash
      env:
        CC: gcc-10
        CXX: g++-10
    - name: build for macOS
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p build && cd build
        cmake .. -DBUILD_ALL=ON -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DBUILD_BACKEND_CUDA=OFF
        make -j8
