name: Release Check

on:
  push:
    branches:
      - 'release'

env:
  CARGO_INCREMENTAL: 0

jobs:
  build-src:
    name: release-build-src-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3
    - uses: tj-actions/changed-files@v37
      id: changed-files
      with:
        files: |
          src/**/*.rs
          src/*.toml
          src/**/*.toml
          src/**/*.proto
    - uses: Jimver/cuda-toolkit@v0.2.11
      if: steps.changed-files.outputs.modified_files && matrix.os == 'windows-latest'
      with:
        cuda: '12.2.0'
        method: 'network'
        sub-packages: '["nvcc", "cudart", "cublas_dev", "cusolver_dev"]'
    - name: install cuda
      if: steps.changed-files.outputs.modified_files && matrix.os == 'ubuntu-latest'
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        sudo apt-get update
        sudo apt-get -y install cuda-nvcc-12-2 libcublas-dev-12-2 libcusolver-dev-12-2
        echo "/usr/local/cuda/bin" >> $GITHUB_PATH
    - name: install shaderc
      if: steps.changed-files.outputs.modified_files && matrix.os == 'windows-latest'
      run: |
        Invoke-WebRequest -URI https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/windows/continuous_release_2019/10/20230531-104731/install.zip -OutFile shaderc.zip
        Expand-Archive -Path shaderc.zip -DestinationPath shaderc
        echo "SHADERC_LIB_DIR=$Env:GITHUB_WORKSPACE/shaderc/install/lib" >> $Env:GITHUB_ENV
        rm shaderc.zip
    - name: install shaderc
      if: steps.changed-files.outputs.modified_files && matrix.os == 'ubuntu-latest'
      run: |
        curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/418/20230531-104531/install.tgz > shaderc.tgz
        tar -xzf shaderc.tgz
        echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        rm shaderc.tgz
    - name: install shaderc
      if: steps.changed-files.outputs.modified_files && matrix.os == 'macos-latest'
      run: |
        curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/macos/continuous_clang_release/426/20230531-104534/install.tgz > shaderc.tgz
        tar -xzf shaderc.tgz
        echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        cp install/lib/*.dylib /usr/local/lib/
        rm shaderc.tgz

    - name: Install Protoc
      uses: arduino/setup-protoc@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
      if: steps.changed-files.outputs.modified_files
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src -> target'
      if: steps.changed-files.outputs.modified_files

    - name: Build src on ${{ matrix.os }}
      if: steps.changed-files.outputs.modified_files && matrix.os == 'windows-latest'
      run: |
        cd src
        cargo build --all --release
        cargo test --workspace --release --features test-utilities --exclude autd3-backend-cuda --exclude autd3-link-soem  --exclude autd3-backend-arrayfire -- --skip test_timer
    - name: Build src on ${{ matrix.os }}
      if: steps.changed-files.outputs.modified_files && matrix.os == 'ubuntu-latest'
      run: |
        cd src
        cargo build --all --release --exclude autd3-backend-arrayfire
        cargo test --all --release --features test-utilities --exclude autd3-backend-cuda --exclude autd3-backend-arrayfire -- --skip test_timer
    - name: Build src on ${{ matrix.os }}
      if: steps.changed-files.outputs.modified_files && matrix.os == 'macos-latest'
      run: |
        cd src
        cargo build --all --release --exclude autd3-backend-cuda --exclude autd3-backend-arrayfire
        cargo test --all --release --features test-utilities --exclude autd3-backend-cuda --exclude autd3-backend-arrayfire -- --skip test_timer
    - name: Build examples on ${{ matrix.os }}
      if: steps.changed-files.outputs.modified_files && matrix.os == 'windows-latest'
      run: |
        cd src/examples
        cargo build --bins --release --features "remote_soem twincat remote_twincat simulator_client simulator_server geometry_viewer" 
    - name: Build examples on ${{ matrix.os }}
      if: steps.changed-files.outputs.modified_files && matrix.os != 'windows-latest'
      run: |
        cd src/examples
        cargo build --bins --release --features "soem remote_soem twincat remote_twincat simulator_client simulator_server geometry_viewer" 

  build-capi:
    name: release-build-capi-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3
    - uses: tj-actions/changed-files@v37
      id: changed-files
      with:
        files: |
          capi/**/*.rs
          src/*.toml
          src/**/*.toml
    - uses: Jimver/cuda-toolkit@v0.2.11
      if: steps.changed-files.outputs.modified_files && matrix.os == 'windows-latest'
      with:
        cuda: '12.2.0'
        method: 'network'
        sub-packages: '["nvcc", "cudart", "cublas_dev", "cusolver_dev"]'
    - name: install cuda
      if: steps.changed-files.outputs.modified_files && matrix.os == 'ubuntu-latest'
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        sudo apt-get update
        sudo apt-get -y install cuda-nvcc-12-2 libcublas-dev-12-2 libcusolver-dev-12-2
        echo "/usr/local/cuda/bin" >> $GITHUB_PATH
    - name: install shaderc
      if: steps.changed-files.outputs.modified_files && matrix.os == 'windows-latest'
      run: |
        Invoke-WebRequest -URI https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/windows/continuous_release_2019/10/20230531-104731/install.zip -OutFile shaderc.zip
        Expand-Archive -Path shaderc.zip -DestinationPath shaderc
        echo "SHADERC_LIB_DIR=$Env:GITHUB_WORKSPACE/shaderc/install/lib" >> $Env:GITHUB_ENV
        rm shaderc.zip
    - name: install shaderc
      if: steps.changed-files.outputs.modified_files && matrix.os == 'ubuntu-latest'
      run: |
        curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/418/20230531-104531/install.tgz > shaderc.tgz
        tar -xzf shaderc.tgz
        echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        rm shaderc.tgz
    - name: install shaderc
      if: steps.changed-files.outputs.modified_files && matrix.os == 'macos-latest'
      run: |
        curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/macos/continuous_clang_release/426/20230531-104534/install.tgz > shaderc.tgz
        tar -xzf shaderc.tgz
        echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        cp install/lib/*.dylib /usr/local/lib/
        rm shaderc.tgz

    - name: Install Protoc
      uses: arduino/setup-protoc@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
      if: steps.changed-files.outputs.modified_files
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './capi -> target'
      if: steps.changed-files.outputs.modified_files

    - name: Build capi on ${{ matrix.os }}
      if: steps.changed-files.outputs.modified_files && matrix.os == 'windows-latest'
      run: |
        cd capi
        cargo build --all --release
        cargo test --workspace --release --exclude autd3capi-link-soem
    - name: Build capi on ${{ matrix.os }}
      if: steps.changed-files.outputs.modified_files && matrix.os == 'ubuntu-latest'
      run: |
        cd capi
        cargo build --all --release
        cargo test --all --release --exclude autd3capi-backend-cuda
    - name: Build capi on ${{ matrix.os }}
      if: steps.changed-files.outputs.modified_files && matrix.os == 'macos-latest'
      run: |
        cd capi
        cargo build --all --release --exclude autd3capi-backend-cuda
        cargo test --all --release --exclude autd3capi-backend-cuda

  build-linux-arm32-src:
    name: release-build-src-linux-arm32
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v3
    - uses: tj-actions/changed-files@v37
      id: changed-files
      with:
        files: |
          src/**/*.rs
          src/*.toml
          src/**/*.toml
          src/**/*.proto
    - name: install arm32 target
      run : |
        sudo apt-get update
        sudo apt-get -y install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        rustup target add armv7-unknown-linux-gnueabihf
      if: steps.changed-files.outputs.modified_files
    - name: Install Protoc
      uses: arduino/setup-protoc@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
      if: steps.changed-files.outputs.modified_files
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src -> target'
      if: steps.changed-files.outputs.modified_files

    - name: Build src
      run: |
        cd src
        cargo build --all --release --target=armv7-unknown-linux-gnueabihf --exclude autd3-backend-cuda --exclude autd3-link-monitor --exclude autd3-backend-arrayfire
      if: steps.changed-files.outputs.modified_files

    - name: Build examples
      run: |
        cd src/examples
        cargo build --release --bins --features "soem remote_soem remote_twincat simulator_client" --target=armv7-unknown-linux-gnueabihf
      if: steps.changed-files.outputs.modified_files

  build-linux-arm32-capi:
    name: release-build-capi-linux-arm32
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v3
    - uses: tj-actions/changed-files@v37
      id: changed-files
      with:
        files: |
          capi/**/*.rs
          src/*.toml
          src/**/*.toml
    - name: install arm32 target
      run : |
        sudo apt-get update
        sudo apt-get -y install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        rustup target add armv7-unknown-linux-gnueabihf
      if: steps.changed-files.outputs.modified_files
    - name: Install Protoc
      uses: arduino/setup-protoc@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
      if: steps.changed-files.outputs.modified_files
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './capi -> target'
      if: steps.changed-files.outputs.modified_files

    - name: Build src
      run: |
        cd capi
        cargo build --all --release  --target=armv7-unknown-linux-gnueabihf --exclude autd3capi-backend-cuda --exclude autd3capi-simulator --exclude autd3capi-geometry-viewer
      if: steps.changed-files.outputs.modified_files

  build-linux-aarch64-src:
    name: release-build-src-linux-aarch64
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v3
    - uses: tj-actions/changed-files@v37
      id: changed-files
      with:
        files: |
          src/**/*.rs
          src/*.toml
          src/**/*.toml
          src/**/*.proto
    - name: install aarch64 target
      run : |
        sudo apt-get update
        sudo apt-get -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        rustup target add aarch64-unknown-linux-gnu
      if: steps.changed-files.outputs.modified_files
    - name: Install Protoc
      uses: arduino/setup-protoc@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
      if: steps.changed-files.outputs.modified_files
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src -> target'
      if: steps.changed-files.outputs.modified_files

    - name: Build src
      run: |
        cd src
        cargo build --all --release --target=aarch64-unknown-linux-gnu --exclude autd3-backend-cuda --exclude autd3-link-monitor --exclude autd3-backend-arrayfire
      if: steps.changed-files.outputs.modified_files
    
    - name: Build examples
      run: |
        cd src/examples
        cargo build --release --bins --features "soem remote_soem remote_twincat simulator_client" --target=aarch64-unknown-linux-gnu
      if: steps.changed-files.outputs.modified_files

  build-linux-aarch64-capi:
    name: release-build-capi-linux-aarch64
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
    - uses: actions/checkout@v3
    - uses: tj-actions/changed-files@v37
      id: changed-files
      with:
        files: |
          capi/**/*.rs
          src/*.toml
          src/**/*.toml
    - name: install aarch64 target
      run : |
        sudo apt-get update
        sudo apt-get -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        rustup target add aarch64-unknown-linux-gnu
      if: steps.changed-files.outputs.modified_files
    - name: Install Protoc
      uses: arduino/setup-protoc@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
      if: steps.changed-files.outputs.modified_files
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './capi -> target'
      if: steps.changed-files.outputs.modified_files

    - name: Build src
      run: |
        cd capi
        cargo build --all --release  --target=aarch64-unknown-linux-gnu --exclude autd3capi-backend-cuda --exclude autd3capi-simulator --exclude autd3capi-geometry-viewer
      if: steps.changed-files.outputs.modified_files

  lint-src:
    name: release-lint-src
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: tj-actions/changed-files@v37
      id: changed-files
      with:
        files: |
          src/**/*.rs
          src/*.toml
          src/**/*.toml
          src/**/*.proto
    - name: install cuda
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        sudo apt-get update
        sudo apt-get -y install cuda-nvcc-12-2 libcublas-dev-12-2 libcusolver-dev-12-2
        echo "/usr/local/cuda/bin" >> $GITHUB_PATH
      if: steps.changed-files.outputs.modified_files
    - name: install shaderc
      run: |
        curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/418/20230531-104531/install.tgz > shaderc.tgz
        tar -xzf shaderc.tgz
        echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        rm shaderc.tgz
      if: steps.changed-files.outputs.modified_files

    - name: Install Protoc
      uses: arduino/setup-protoc@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
      if: steps.changed-files.outputs.modified_files
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src -> target'
      if: steps.changed-files.outputs.modified_files

    - name: lint src
      run: |
        cd src
        cargo clippy --all --release --exclude autd3-backend-arrayfire -- -D warnings
      if: steps.changed-files.outputs.modified_files

  lint-capi:
    name: release-lint-capi
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: tj-actions/changed-files@v37
      id: changed-files
      with:
        files: |
          capi/**/*.rs
          src/*.toml
          src/**/*.toml
    - name: install cuda
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        sudo apt-get update
        sudo apt-get -y install cuda-nvcc-12-2 libcublas-dev-12-2 libcusolver-dev-12-2
        echo "/usr/local/cuda/bin" >> $GITHUB_PATH
      if: steps.changed-files.outputs.modified_files
    - name: install shaderc
      run: |
        curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/418/20230531-104531/install.tgz > shaderc.tgz
        tar -xzf shaderc.tgz
        echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        rm shaderc.tgz
      if: steps.changed-files.outputs.modified_files

    - name: Install Protoc
      uses: arduino/setup-protoc@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
      if: steps.changed-files.outputs.modified_files
 
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './capi -> target'
      if: steps.changed-files.outputs.modified_files

    - name: lint capi
      run: |
        cd capi
        cargo clippy --all --release -- -D warnings
      if: steps.changed-files.outputs.modified_files

  publish-server:
    name: release-build-server
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - uses: tj-actions/changed-files@v37
        id: changed-files
        with:
          files: |
            server/**/*.rs
            server/*.toml
            server/**/*.toml
            server/*.js
            server/**/*.js
            server/*.ts
            server/**/*.ts
            server/**/*.svelte
            server/*.json
            server/index.html

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        if: steps.changed-files.outputs.modified_files
        
      - name: install aarch64 target on macos
        if: steps.changed-files.outputs.modified_files && matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './server/src-tauri -> target'
        if: steps.changed-files.outputs.modified_files

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
        if: steps.changed-files.outputs.modified_files

      - name: install dependencies (ubuntu only)
        if: steps.changed-files.outputs.modified_files && matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: install shaderc
        if: steps.changed-files.outputs.modified_files && matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -URI https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/windows/continuous_release_2019/10/20230531-104731/install.zip -OutFile shaderc.zip
          Expand-Archive -Path shaderc.zip -DestinationPath shaderc
          echo "SHADERC_LIB_DIR=$Env:GITHUB_WORKSPACE/shaderc/install/lib" >> $Env:GITHUB_ENV
          rm shaderc.zip
      - name: install shaderc
        if: steps.changed-files.outputs.modified_files && matrix.os == 'ubuntu-latest'
        run: |
          curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/418/20230531-104531/install.tgz > shaderc.tgz
          tar -xzf shaderc.tgz
          echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          rm shaderc.tgz
      - name: install shaderc
        if: steps.changed-files.outputs.modified_files && matrix.os == 'macos-latest'
        run: |
          curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/macos/continuous_clang_release/426/20230531-104534/install.tgz > shaderc.tgz
          tar -xzf shaderc.tgz
          echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          cp install/lib/*.dylib /usr/local/lib/
          rm shaderc.tgz

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
        if: steps.changed-files.outputs.modified_files
      - name: install frontend dependencies
        run: |
          cd server 
          npm install
        if: steps.changed-files.outputs.modified_files
      - name: build
        if: steps.changed-files.outputs.modified_files && matrix.os == 'macos-latest'
        run: |
          cd server
          cd simulator
          cargo build --release --target=x86_64-apple-darwin
          cargo build --release --target=aarch64-apple-darwin
          cd ..
          cd SOEMAUTDServer
          cargo build --release --target=x86_64-apple-darwin
          cargo build --release --target=aarch64-apple-darwin
          cd ..
          npm run tauri build -- --target universal-apple-darwin
      - name: build
        if: steps.changed-files.outputs.modified_files && matrix.os != 'macos-latest'
        run: |
          cd server
          cd simulator
          cargo build --release
          cd ..
          cd SOEMAUTDServer
          cargo build --release
          cd ..
          npm run tauri build
