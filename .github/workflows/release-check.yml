name: Release Check

on:
  push:
    branches:
      - 'release'

env:
  CARGO_INCREMENTAL: 0

jobs:
  build:
    name: build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v3
    - uses: Jimver/cuda-toolkit@v0.2.10
      if: matrix.os == 'windows-latest'
      with:
        method: 'network'
        sub-packages: '["nvcc", "cudart", "cublas_dev", "cusolver_dev"]'
    - name: install cuda
      if: matrix.os == 'ubuntu-latest'
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        sudo apt-get update
        sudo apt-get -y install cuda-nvcc-12-1 libcublas-dev-12-1 libcusolver-dev-12-1
        echo "/usr/local/cuda/bin" >> $GITHUB_PATH
    - name: install shaderc
      if: matrix.os == 'windows-latest'
      run: |
        Invoke-WebRequest -URI https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/windows/continuous_release_2019/10/20230531-104731/install.zip -OutFile shaderc.zip
        Expand-Archive -Path shaderc.zip -DestinationPath shaderc
        echo "SHADERC_LIB_DIR=$Env:GITHUB_WORKSPACE/shaderc/install/lib" >> $Env:GITHUB_ENV
        rm shaderc.zip
    - name: install shaderc
      if: matrix.os == 'ubuntu-latest'
      run: |
        curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/418/20230531-104531/install.tgz > shaderc.tgz
        tar -xzf shaderc.tgz
        echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        rm shaderc.tgz
    - name: install shaderc
      if: matrix.os == 'macos-latest'
      run: |
        curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/macos/continuous_clang_release/426/20230531-104534/install.tgz > shaderc.tgz
        tar -xzf shaderc.tgz
        echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        cp install/lib/*.dylib /usr/local/lib/
        rm shaderc.tgz

    - name: Install Protoc
      uses: arduino/setup-protoc@v2
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src -> target'
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './examples -> target'
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './capi -> target'

    - name: Build src on ${{ matrix.os }}
      if: matrix.os == 'windows-latest'
      run: |
        cd src
        cargo build --all --release
        cargo test --workspace --release --exclude autd3-link-soem -- --skip test_timer
    - name: Build src on ${{ matrix.os }}
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd src
        cargo build --all --release
        cargo test --all --release -- --skip test_timer
    - name: Build src on ${{ matrix.os }}
      if: matrix.os == 'macos-latest'
      run: |
        cd src
        cargo build --all --release --exclude autd3-backend-cuda
        cargo test --all --release --exclude autd3-backend-cuda -- --skip test_timer
    - name: Build examples on ${{ matrix.os }}
      if: matrix.os == 'windows-latest'
      run: |
        cd examples
        cargo build --bins --release --features "remote_soem twincat remote_twincat simulator_client simulator_server geometry_viewer" 
    - name: Build examples on ${{ matrix.os }}
      if: matrix.os != 'windows-latest'
      run: |
        cd examples
        cargo build --bins --release --features "soem remote_soem twincat remote_twincat simulator_client simulator_server geometry_viewer" 
    - name: Build capi on ${{ matrix.os }}
      if: matrix.os == 'windows-latest'
      run: |
        cd capi
        cargo build --all --release
        cargo test --workspace --release --exclude autd3capi-link-soem
    - name: Build capi on ${{ matrix.os }}
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd capi
        cargo build --all --release
        cargo test --all --release --exclude autd3capi-backend-cuda
    - name: Build capi on ${{ matrix.os }}
      if: matrix.os == 'macos-latest'
      run: |
        cd capi
        cargo build --all --release --exclude autd3capi-backend-cuda
        cargo test --all --release --exclude autd3capi-backend-cuda
    - name: Build dist on ${{ matrix.os }}
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        cd SOEMAUTDServer
        cargo build --all --release
        cargo test --release
        cargo clippy --all --release -- -D warnings
        cd ..
        cd simulator
        cargo build --all --release
        cargo test --release
        cargo clippy --all --release -- -D warnings

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: install cuda
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        sudo apt-get update
        sudo apt-get -y install cuda-nvcc-12-1 libcublas-dev-12-1 libcusolver-dev-12-1
        echo "/usr/local/cuda/bin" >> $GITHUB_PATH
    - name: install shaderc
      run: |
        curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/418/20230531-104531/install.tgz > shaderc.tgz
        tar -xzf shaderc.tgz
        echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        rm shaderc.tgz

    - name: Install Protoc
      uses: arduino/setup-protoc@v2
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src -> target'
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './examples -> target'
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './capi -> target'

    - name: lint src
      run: |
        cd src
        cargo clippy --all --release -- -D warnings
    - name: lint examples
      run: |
        cd examples
        cargo clippy --all --release -- -D warnings
    - name: lint capi
      run: |
        cd capi
        cargo clippy --all --release -- -D warnings
