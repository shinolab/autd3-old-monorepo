name: Release

on:
  push:
    tags:
    - 'v*'

env:
  CARGO_INCREMENTAL: 0


jobs:
  license-check:
    runs-on: ubuntu-latest
    name: Check license
    steps:
    - uses: actions/checkout@v3
    - name: Sync node version and setup cache
      uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    - name: install frontend dependencies
      run: |
        cd server 
        npm install
    - name: Check license
      run: |
        cd license-checker
        cargo run

  build:
    needs: [license-check]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: install cuda
      run: |
        wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
        sudo dpkg -i cuda-keyring_1.1-1_all.deb
        sudo apt-get update
        sudo apt-get -y install cuda-nvcc-12-1 libcublas-dev-12-1 libcusolver-dev-12-1
        echo "/usr/local/cuda/bin" >> $GITHUB_PATH
    - name: install shaderc
      run: |
        curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/418/20230531-104531/install.tgz > shaderc.tgz
        tar -xzf shaderc.tgz
        echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
        rm shaderc.tgz
    - name: Install Protoc
      uses: arduino/setup-protoc@v2
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: publish to carate.io
      run: |
        git submodule update --init --recursive
        cd src
        cd autd3-driver
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd .. && sleep 60
        cd autd3-core
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-traits
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd .. && sleep 60
        cd autd3-firmware-emulator
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd .. && sleep 60
        cd autd3
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-gain-holo
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd .. && sleep 60
        cd autd3-backend-cuda
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd .. && sleep 60
        cd autd3-protobuf
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-link-soem
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-link-twincat
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-link-simulator
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-link-monitor
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-modulation-audio-file
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true

  release:
    needs: [license-check]
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
        echo "${{ steps.create_release.outputs.id }}" > release_id.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_id
        path: release_id.txt

  publish_win:
    needs: [release]
    name: Upload Release Asset Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: Jimver/cuda-toolkit@v0.2.10
        with:
          method: 'network'
          sub-packages: '["nvcc", "cudart", "cublas_dev", "cusolver_dev"]'
      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-win';
      - name: install shaderc
        run: |
          Invoke-WebRequest -URI https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/windows/continuous_release_2019/10/20230531-104731/install.zip -OutFile shaderc.zip
          Expand-Archive -Path shaderc.zip -DestinationPath shaderc
          echo "SHADERC_LIB_DIR=$Env:GITHUB_WORKSPACE/shaderc/install/lib" >> $Env:GITHUB_ENV
          rm shaderc.zip
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build project x64
        run: |
          cd cpp
          ./build.ps1
          cd ..
          Compress-Archive -Path LICENSE, cpp/bin, cpp/lib, cpp/include, cpp/CMakeLists.txt, cpp/README.md, cpp/ThirdPartyNotice.txt -DestinationPath assets_x64.zip
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        uses: juliangruber/read-file-action@v1
        with:
          path: ./release_url/release_url.txt
      - name: Upload Release Asset Win x64
        id: upload-release-asset-win64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.content }}
          asset_path: ./assets_x64.zip
          asset_name: ${{ steps.get_version.outputs.result }}-x64.zip
          asset_content_type: application/zip

      - name: Build project x64 for Unity
        run: |
          cd dotnet/unity
          ./build.ps1
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          registry-url: 'https://registry.npmjs.org'
      - name: Publish on npmjs
        continue-on-error: true
        run: |
          mv dotnet/unity/Assets/autd3/Samples dotnet/unity/Assets/autd3/Samples~
          rm -Force dotnet/unity/Assets/autd3/Samples.meta
          cd dotnet/unity/Assets/autd3
          npm install
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish_firmware:
    needs: [release]
    name: Upload Release Asset Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-firmware';
      - name: Build project x64
        run: |
          Compress-Archive -Path firmware/bin, firmware/scripts, firmware/autd_firmware_writer.ps1, firmware/README.md -DestinationPath assets_x64.zip
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        uses: juliangruber/read-file-action@v1
        with:
          path: ./release_url/release_url.txt
      - name: Upload Release Asset Win x64
        id: upload-release-asset-win64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.content }}
          asset_path: ./assets_x64.zip
          asset_name: ${{ steps.get_version.outputs.result }}.zip
          asset_content_type: application/zip

  publish_linux:
    needs: [release]
    name: Upload Release Asset Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: install cuda
        run: |
          wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
          sudo apt-get update
          sudo apt-get -y install cuda-nvcc-12-1 libcublas-dev-12-1 libcusolver-dev-12-1
          echo "/usr/local/cuda/bin" >> $GITHUB_PATH
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-linux';
      - name: install shaderc
        run: |
          curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/418/20230531-104531/install.tgz > shaderc.tgz
          tar -xzf shaderc.tgz
          echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          rm shaderc.tgz
      - name: Build project x64
        run: |
          cp LICENSE cpp/
          cd cpp
          chmod +x build.sh
          ./build.sh
          tar -zcvf assets_x64.tar.gz bin include CMakeLists.txt LICENSE README.md ThirdPartyNotice.txt
        shell: bash
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset-x64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./cpp/assets_x64.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-x64.tar.gz
          asset_content_type: application/octet-stream
  
  publish_linux-arm32:
    needs: [release]
    name: Upload Release Asset Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: install arm32 target
        run : |
          sudo apt-get update
          sudo apt-get -y install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          rustup target add armv7-unknown-linux-gnueabihf
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-linux';
      - name: Build project arm32
        run: |
          cp LICENSE cpp/
          cd cpp
          chmod +x build-arm32.sh
          ./build-arm32.sh
          tar -zcvf assets_arm32.tar.gz bin include CMakeLists.txt LICENSE README.md ThirdPartyNotice.txt
        shell: bash
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset-arm32
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./cpp/assets_arm32.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-armv7.tar.gz
          asset_content_type: application/octet-stream
  
  publish_linux-aarch64:
    needs: [release]
    name: Upload Release Asset Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: install aarch64 target
        run : |
          sudo apt-get update
          sudo apt-get -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-linux';
      - name: Build project aarch64
        run: |
          cp LICENSE cpp/
          cd cpp
          chmod +x build-aarch64.sh
          ./build-aarch64.sh
          tar -zcvf assets_aarch64.tar.gz bin include CMakeLists.txt LICENSE README.md ThirdPartyNotice.txt
        shell: bash
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset-aarch64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./cpp/assets_aarch64.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-aarch64.tar.gz
          asset_content_type: application/octet-stream
  
  publish_mac:
    needs: [release]
    name: Upload Release Asset macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-macos-universal.tar.gz';
      - name: install shaderc
        run: |
          curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/macos/continuous_clang_release/426/20230531-104534/install.tgz > shaderc.tgz
          tar -xzf shaderc.tgz
          echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          cp install/lib/*.dylib /usr/local/lib/
          rm shaderc.tgz
      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: install aarch64 target on macos
        run: |
          rustup target add aarch64-apple-darwin
      - name: Build project
        run: |
          cp LICENSE cpp/
          cd cpp
          chmod +x build.sh
          ./build.sh
          tar -zcvf assets.tar.gz bin include CMakeLists.txt LICENSE README.md ThirdPartyNotice.txt
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./cpp/assets.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}
          asset_content_type: application/octet-stream

  publish_pypi:
    needs: [build, publish_win, publish_linux, publish_mac]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine wheel build
        cd python
        python download_bin.py
    - name: Build whl
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd python
        python -m build -w -C="--build-option=--plat-name" -C="--build-option=manylinux1-x86_64"
    - name: Build whl
      if: matrix.os == 'windows-latest'
      run: |
        cd python
        python -m build -w -C="--build-option=--plat-name" -C="--build-option=win-amd64"
    - name: Build whl
      if: matrix.os == 'macos-latest'
      run: |
        cd python
        python -m build -w -C="--build-option=--plat-name" -C="--build-option=macosx-10-13-x86_64"
        python -m build -w -C="--build-option=--plat-name" -C="--build-option=macosx-11-0-arm64"
    - name: Publish
      run: |
        cd python
        twine upload dist/* -u ${{ secrets.TWINE_USERNAME }} -p ${{ secrets.TWINE_PASS }} --non-interactive --skip-existing

  publish_nuget:
    needs: [build, publish_win, publish_linux, publish_mac]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Get the version
      id: get_version
      run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3 | cut -d . -f 1,2,3)" >> $GITHUB_OUTPUT
    - name: Download latest binary
      run: | 
        wget https://github.com/shinolab/autd3/releases/download/${{ steps.get_version.outputs.VERSION }}/autd3-${{ steps.get_version.outputs.VERSION }}-linux-x64.tar.gz
        wget https://github.com/shinolab/autd3/releases/download/${{ steps.get_version.outputs.VERSION }}/autd3-${{ steps.get_version.outputs.VERSION }}-macos-universal.tar.gz
        wget https://github.com/shinolab/autd3/releases/download/${{ steps.get_version.outputs.VERSION }}/autd3-${{ steps.get_version.outputs.VERSION }}-win-x64.zip
    - name: Replace latest binary
      run: |
        cp LICENSE dotnet/cs/src/LICENSE.txt
        echo "\n=========================================================\n" >> dotnet/cs/src/LICENSE.txt
        cat ./capi/ThirdPartyNotice.txt >> dotnet/cs/src/LICENSE.txt
        tar -zxvf autd3-${{ steps.get_version.outputs.VERSION }}-linux-x64.tar.gz
        rm -f ./dotnet/cs/src/native/linux/x64/*
        \cp bin/*.so ./dotnet/cs/src/native/linux/x64/
        tar -zxvf autd3-${{ steps.get_version.outputs.VERSION }}-macos-universal.tar.gz
        rm -f ./dotnet/cs/src/native/osx/universal/*
        \cp bin/*.dylib ./dotnet/cs/src/native/osx/universal/
        unzip -o autd3-${{ steps.get_version.outputs.VERSION }}-win-x64.zip
        rm -f ./dotnet/cs/src/native/windows/x64/*
        \cp bin/*.dll ./dotnet/cs/src/native/windows/x64/
    - name: Build with dotnet and publish to NuGet
      run: |
        dotnet build -c:Release
        cd bin/Release
        dotnet nuget push autd3sharp.*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate --no-symbols
      working-directory: ./dotnet/cs/src

  publish-server:
    needs: [release]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        
      - name: install aarch64 target on macos
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './server/src-tauri -> target'
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './server/simulator -> target'
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './server/SOEMAUTDServer -> target'

      - name: Install Protoc
        uses: arduino/setup-protoc@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev librsvg2-dev

      - name: install shaderc
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -URI https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/windows/continuous_release_2019/10/20230531-104731/install.zip -OutFile shaderc.zip
          Expand-Archive -Path shaderc.zip -DestinationPath shaderc
          echo "SHADERC_LIB_DIR=$Env:GITHUB_WORKSPACE/shaderc/install/lib" >> $Env:GITHUB_ENV
          rm shaderc.zip
      - name: install shaderc
        if: matrix.os == 'ubuntu-latest'
        run: |
          curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/linux/continuous_clang_release/418/20230531-104531/install.tgz > shaderc.tgz
          tar -xzf shaderc.tgz
          echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          rm shaderc.tgz
      - name: install shaderc
        if: matrix.os == 'macos-latest'
        run: |
          curl -L https://storage.googleapis.com/shaderc/artifacts/prod/graphics_shader_compiler/shaderc/macos/continuous_clang_release/426/20230531-104534/install.tgz > shaderc.tgz
          tar -xzf shaderc.tgz
          echo "SHADERC_LIB_DIR=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$GITHUB_WORKSPACE/install/lib" >> $GITHUB_ENV
          cp install/lib/*.dylib /usr/local/lib/
          rm shaderc.tgz

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      - name: install frontend dependencies
        run: |
          cd server 
          npm install
      - name: Load Release ID File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_id
      - name: Get Release File Name & Upload URL
        id: get_release_info
        uses: juliangruber/read-file-action@v1
        with:
          path: ./release_id/release_id.txt
      - uses: tauri-apps/tauri-action@v0
        if: matrix.os == 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ steps.get_release_info.outputs.content }}
          projectPath: './server'
          updaterJsonKeepUniversal: true
          args: '--target universal-apple-darwin'
      - uses: tauri-apps/tauri-action@v0
        if: matrix.os != 'macos-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ steps.get_release_info.outputs.content }}
          projectPath: './server'
          releaseDraft: true
          prerelease: false
