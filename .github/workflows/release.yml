name: Release

on:
  push:
    tags:
    - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: publish to carate.io
      run: |
        cd src
        cd autd3-driver
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd .. && sleep 60
        cd autd3-core
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-traits
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd .. && sleep 60
        cd autd3-firmware-emulator
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd .. && sleep 60
        cd autd3
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-link-soem
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-link-twincat
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-link-simulator
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-gain-holo
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true
        cd ..
        cd autd3-modulation-audio-file
        cargo publish --dry-run
        cargo publish --token ${{ secrets.CRATEIO_TOKEN }} || true

  release:
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  publish_win:
    needs: [release]
    name: Upload Release Asset Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-win';
      - name: Build project x64
        run: |
          cd cpp
          ./build.ps1
          cd ..
          Compress-Archive -Path LICENSE, cpp/bin, cpp/lib, cpp/include, cpp/CMakeLists.txt, cpp/README.md -DestinationPath assets_x64.zip
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        uses: juliangruber/read-file-action@v1
        with:
          path: ./release_url/release_url.txt
      - name: Upload Release Asset Win x64
        id: upload-release-asset-win64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.content }}
          asset_path: ./assets_x64.zip
          asset_name: ${{ steps.get_version.outputs.result }}-x64.zip
          asset_content_type: application/zip

      - name: Build project x64 for Unity
        run: |
          cd dotnet/unity
          ./build.ps1
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          registry-url: 'https://registry.npmjs.org'
      - name: Publish on npmjs
        continue-on-error: true
        run: |
          mv dotnet/unity/Assets/autd3/Samples dotnet/unity/Assets/autd3/Samples~
          rm -Force dotnet/unity/Assets/autd3/Samples.meta
          cd dotnet/unity/Assets/autd3
          npm install
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}


  publish_win_assets:
    needs: [release]
    name: Upload Release Asset Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-assets';
      - name: Build project x64
        run: |
          cd dist
          cd simulator
          cargo build --release
          cd ..
          cd SOEMAUTDServer
          cargo build --release
          cd ..
          cd ..
          mkdir publish
          mkdir publish/simulator
          mkdir publish/SOEMAUTDServer
          copy dist/simulator/target/release/*.exe publish/simulator
          copy dist/SOEMAUTDServer/target/release/*.exe publish/SOEMAUTDServer
          Remove-Item -Recurse -Force dist/TwinCATAUTDServer/src
          Compress-Archive -Path dist/TwinCATAUTDServer, dist/firmware, publish/simulator, publish/SOEMAUTDServer -DestinationPath assets_x64.zip
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        uses: juliangruber/read-file-action@v1
        with:
          path: ./release_url/release_url.txt
      - name: Upload Release Asset Win x64
        id: upload-release-asset-win64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.content }}
          asset_path: ./assets_x64.zip
          asset_name: ${{ steps.get_version.outputs.result }}.zip
          asset_content_type: application/zip

  publish_linux:
    needs: [release]
    name: Upload Release Asset Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-linux';
      - name: Build project x64
        run: |
          cp LICENSE cpp/
          cd cpp
          chmod +x build.sh
          ./build.sh
          tar -zcvf assets_x64.tar.gz bin include CMakeLists.txt LICENSE README.md
        shell: bash
        env:
          CC: gcc-10
          CXX: g++-10
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset-x64
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets_x64.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}-x64.tar.gz
          asset_content_type: application/octet-stream
  
  publish_mac:
    needs: [release]
    name: Upload Release Asset macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get the version
        id: get_version
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            return 'autd3-'+context.payload.ref.replace(/refs\/tags\//, '')+'-macos-universal.tar.gz';
      - name: Build project
        run: |
          cp LICENSE cpp/
          cd cpp
          chmod +x build.sh
          ./build.sh
          tar -zcvf assets.tar.gz bin include CMakeLists.txt LICENSE README.md
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v1
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          value=`cat release_url/release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./assets.tar.gz
          asset_name: ${{ steps.get_version.outputs.result }}
          asset_content_type: application/octet-stream

  publish_pypi:
    needs: [publish_win, publish_linux, publish_mac]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine wheel
    - name: Publish
      run: |
        cd python
        python setup.py sdist bdist_wheel
        twine upload dist/* -u ${{ secrets.TWINE_USERNAME }} -p ${{ secrets.TWINE_PASS }} --non-interactive --skip-existing

  publish_nuget:
    needs: [publish_win, publish_linux, publish_mac]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    - name: Get the version
      id: get_version
      run: echo "VERSION=$(echo $GITHUB_REF | cut -d / -f 3 | cut -d . -f 1,2,3)" >> $GITHUB_OUTPUT
    - name: Download latest binary
      run: | 
        wget https://github.com/shinolab/autd3/releases/download/${{ steps.get_version.outputs.VERSION }}/autd3-${{ steps.get_version.outputs.VERSION }}-linux-x64.tar.gz
        wget https://github.com/shinolab/autd3/releases/download/${{ steps.get_version.outputs.VERSION }}/autd3-${{ steps.get_version.outputs.VERSION }}-macos-universal.tar.gz
        wget https://github.com/shinolab/autd3/releases/download/${{ steps.get_version.outputs.VERSION }}/autd3-${{ steps.get_version.outputs.VERSION }}-win-x64.zip
    - name: Replace latest binary
      run: |
        cp LICENSE dotnet/cs/src/LICENSE.md
        tar -zxvf autd3-${{ steps.get_version.outputs.VERSION }}-linux-x64.tar.gz
        rm -f ./dotnet/cs/src/native/linux/x64/*
        \cp bin/*.so ./dotnet/cs/src/native/linux/x64/
        tar -zxvf autd3-${{ steps.get_version.outputs.VERSION }}-macos-universal.tar.gz
        rm -f ./dotnet/cs/src/native/osx/universal/*
        \cp bin/*.dylib ./dotnet/cs/src/native/osx/universal/
        unzip -o autd3-${{ steps.get_version.outputs.VERSION }}-win-x64.zip
        rm -f ./dotnet/cs/src/native/windows/x64/*
        \cp bin/*.dll ./dotnet/cs/src/native/windows/x64/
    - name: Build with dotnet and publish to NuGet
      run: |
        dotnet build -c:Release
        cd bin/Release
        dotnet nuget push autd3sharp.*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate --no-symbols
      working-directory: ./dotnet/cs/src
