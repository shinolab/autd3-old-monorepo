cmake_minimum_required(VERSION 3.21)

if(${CMAKE_SOURCE_DIR} STREQUAL ${CMAKE_BINARY_DIR})
  message(FATAL_ERROR "In-source builds not allowed. Please make a new directory (called a build directory) and run CMake from there. You may need to remove CMakeCache.txt. ")
endif()

project(autd3)

set(VERSION_MAJOR 2 CACHE STRING "Project major version number.")
set(VERSION_MINOR 7 CACHE STRING "Project minor version number.")
set(VERSION_PATCH 5 CACHE STRING "Project patch version number.")
mark_as_advanced(VERSION_MAJOR VERSION_MINOR VERSION_PATCH)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

option(BUILD_ALL "BUILD_ALL" OFF)
option(BUILD_DOC "BUILD_DOC" OFF)

option(AUTD3_PARALLEL_FOR "AUTD3_PARALLEL_FOR" OFF)

option(BUILD_GAIN_HOLO "BUILD_GAIN_HOLO" ON)
option(HOLO_PARALLEL_FOR "HOLO_PARALLEL_FOR" ON)
option(BUILD_BACKEND_CUDA "BUILD_BACKEND_CUDA" OFF)
option(BUILD_BACKEND_ARRAYFIRE "BUILD_BACKEND_ARRAYFIRE" OFF)
option(BUILD_BACKEND_BLAS "BUILD_BACKEND_BLAS" OFF)
set(BLAS_LIB_DIR CACHE PATH "BLAS library directory")
set(BLAS_DEPEND_LIB_DIR CACHE PATH "Additional library directory for BLAS")
set(BLAS_INCLUDE_DIR CACHE PATH "BLAS include directory")
option(USE_MKL "USE_MKL" OFF)

option(BUILD_MODULATION_AUDIO_FILE "BUILD_MODULATION_AUDIO_FILE" OFF)

option(BUILD_LINK_SOEM "BUILD_LINK_SOEM" ON)
option(BUILD_LINK_TWINCAT "BUILD_LINK_TWINCAT" OFF)
option(BUILD_LINK_REMOTE_TWINCAT "BUILD_LINK_REMOTE_TWINCAT" OFF)
option(BUILD_LINK_BUNDLE "BUILD_LINK_BUNDLE" OFF)
option(BUILD_LINK_DEBUG "BUILD_LINK_DEBUG" ON)
option(BUILD_LINK_SIMULATOR "BUILD_LINK_SIMULATOR" OFF)
option(BUILD_LINK_REMOTE_SOEM "BUILD_LINK_REMOTE_SOEM" OFF)

option(BUILD_GEOMETRY_VIEWER "BUILD_GEOMETRY_VIEWER" OFF)
option(BUILD_SIMULATOR "BUILD_SIMULATOR" OFF)

option(BUILD_EXAMPLES "BUILD_EXAMPLES" ON)
option(DISABLE_EXAMPLES "DISABLE_EXAMPLES" OFF)

option(BUILD_CAPI "BUILD_CAPI" OFF)

option(ENABLE_LINT "ENABLE_LINT" OFF)

option(EXPORT_AUTD_SIMULATOR "EXPORT_AUTD_SIMULATOR" OFF)
option(EXPORT_SOEM_AUTD_SERVER "EXPORT_SOEM_AUTD_SERVER" OFF)

option(BUILD_TEST "BUILD_TEST" OFF)

option(USE_METER "Use meter instead of millimeter" OFF)
option(USE_LEFT_HANDED "Use left-handed coordinate system instead of right-handed" OFF)
option(USE_SINGLE_FLOAT "Use single precision (32 bit) floating number" OFF)

option(ENABLE_BENCH "Enable benchmarks" OFF)

if(DEFINED BUILD_TARGET)
  if(${BUILD_TARGET} STREQUAL ARM32 OR ${BUILD_TARGET} STREQUAL ARM)
    set(AUTD3_BUILD_ARM ON)
  elseif(${BUILD_TARGET} STREQUAL ARM64 OR ${BUILD_TARGET} STREQUAL AARCH64)
    set(AUTD3_BUILD_ARM ON)
  elseif(${BUILD_TARGET} STREQUAL AMD64 OR ${BUILD_TARGET} STREQUAL x86_64 OR ${BUILD_TARGET} STREQUAL x64)
    set(AUTD3_BUILD_ARM OFF)
  endif()
elseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL ARM32 OR ${CMAKE_SYSTEM_PROCESSOR} STREQUAL ARM)
  set(AUTD3_BUILD_ARM ON)
elseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL ARM64 OR ${CMAKE_SYSTEM_PROCESSOR} STREQUAL AARCH64)
  set(AUTD3_BUILD_ARM ON)
else()
  set(AUTD3_BUILD_ARM OFF)
endif()

if(BUILD_ALL)
  set(BUILD_GAIN_HOLO ON)
  set(BUILD_MODULATION_AUDIO_FILE ON)
  set(BUILD_LINK_SOEM ON)
  set(BUILD_LINK_REMOTE_SOEM ON)
  set(BUILD_LINK_TWINCAT ON)
  set(BUILD_LINK_REMOTE_TWINCAT ON)
  set(BUILD_LINK_BUNDLE ON)
  set(BUILD_LINK_DEBUG ON)
  set(BUILD_LINK_SIMULATOR ON)
  set(BUILD_EXAMPLES ON)
  set(BUILD_CAPI ON)
endif()

if(DISABLE_EXAMPLES)
  set(BUILD_EXAMPLES OFF)
endif()

if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  set(HOLO_PARALLEL_FOR OFF)
  set(AUTD3_PARALLEL_FOR OFF)
  message(NOTICE "Disable HOLO_PARALLEL_FOR and AUTD3_PARALLEL_FOR options because clang does not support std::execution")
endif()

if(WIN32)
  set(OS win32)
  include(cmakes/win_vs.cmake)
elseif(APPLE)
  set(OS macosx)
  include(cmakes/mac.cmake)
else()
  set(OS linux)
  include(cmakes/linux.cmake)
endif()
include(cmakes/utils.cmake)

if(BUILD_TEST)
  cmake_policy(SET CMP0077 NEW)
  if(POLICY CMP0135)
    cmake_policy(SET CMP0135 NEW)
  endif()
  include(${PROJECT_SOURCE_DIR}/cmakes/gtest.cmake)
endif()

if(NOT BUILD_SHARED_LIBS)
  set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
endif()

if(BUILD_DOC)
  find_package(Doxygen)
  if(DOXYGEN_FOUND)
    message(STATUS "Doxygen found.")
    add_subdirectory(doc/doxygen)
  else()
    message(STATUS "Doxygen is needed to build the documentation. Skip building doc...")
  endif()
endif()

find_package(Git)
if(NOT Git_FOUND)
  message(WARNING "Git not found.")
endif()

if(ENABLE_LINT)
  update_git_submodule(cpplint RECURSIVE)
  file(GLOB_RECURSE lint_files src/*.cpp src/*.hpp include/*.hpp capi/*.cpp capi/*.hpp examples/*.cpp examples/*.hpp tests/*.hpp tests/*.cpp)
  ADD_CUSTOM_TARGET(cpplint
    python
    ${PROJECT_SOURCE_DIR}/3rdparty/cpplint/cpplint.py
    --filter=-runtime/references,-build/c++11,-whitespace/comments,-readability/braces,-build/include_subdir,-build/include_order,-whitespace/parens,-readability/fn_size
    --linelength=1000
    ${lint_files}
  )
endif()

update_git_submodule(eigen RECURSIVE)
set(EIGEN_PATH ${PROJECT_SOURCE_DIR}/3rdparty/eigen)

update_git_submodule(spdlog RECURSIVE)
set(SPDLOG_INCLUDE_PATH ${PROJECT_SOURCE_DIR}/3rdparty/spdlog/include)

if(BUILD_LINK_REMOTE_TWINCAT)
  update_git_submodule(ADS RECURSIVE)
  set(ADS_PATH ${PROJECT_SOURCE_DIR}/3rdparty/ADS)
endif()

if(BUILD_LINK_SOEM OR EXPORT_SOEM_AUTD_SERVER)
  update_git_submodule(SOEM RECURSIVE)
  if(WIN32 AND AUTD3_BUILD_ARM)
    execute_process(COMMAND git -C ${PROJECT_SOURCE_DIR} apply --directory=${PROJECT_SOURCE_DIR}/3rdparty/SOEM --unsafe-paths ${PROJECT_SOURCE_DIR}/src/link/soem/win-arm.patch)
  endif()
  set(SOEM_PATH ${PROJECT_SOURCE_DIR}/3rdparty/SOEM)
endif()

if(BUILD_GEOMETRY_VIEWER OR BUILD_SIMULATOR)
  find_package(Vulkan)
  update_git_submodule(json RECURSIVE)
  update_git_submodule(imgui RECURSIVE)
  update_git_submodule(glm RECURSIVE)
  update_git_submodule(glfw RECURSIVE)
  update_git_submodule(stb RECURSIVE)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/json)
  set(GLFW_BUILD_EXAMPLES OFF)
  set(GLFW_BUILD_DOCS OFF)
  set(GLFW_INSTALL OFF)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/glfw)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/glm)
  set(STB_INCLUDE_PATH ${PROJECT_SOURCE_DIR}/3rdparty/stb)
  set(IMGUI_PATH ${PROJECT_SOURCE_DIR}/3rdparty/imgui)
  set_target_properties(glfw PROPERTIES FOLDER "3rdparty")
  set_target_properties(update_mappings PROPERTIES FOLDER "3rdparty")
endif()

if(BUILD_GEOMETRY_VIEWER)
  update_git_submodule(fx-gltf)
  set(FX_GLTF_BUILD_TESTS OFF)
  set(FX_GLTF_INSTALL OFF)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/fx-gltf)
endif()

if(BUILD_SIMULATOR)
  update_git_submodule(tinycolormap RECURSIVE)
  set(BUILD_LINK_SIMULATOR ON)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/tinycolormap)
endif()

if(BUILD_SIMULATOR OR BUILD_LINK_SIMULATOR OR EXPORT_SOEM_AUTD_SERVER OR BUILD_LINK_REMOTE_SOEM)
  set(SMEM_BUILD_EXAMPLE OFF)
  update_git_submodule(smem RECURSIVE)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/smem)
endif()

if(EXPORT_SOEM_AUTD_SERVER)
  update_git_submodule(argparse RECURSIVE)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/argparse)
endif()

if(ENABLE_BENCH)
  set(BENCHMARK_ENABLE_GTEST_TESTS OFF)
  set(BENCHMARK_ENABLE_TESTING OFF)
  update_git_submodule(benchmark RECURSIVE)
  add_subdirectory(${PROJECT_SOURCE_DIR}/3rdparty/benchmark)
endif()

add_library(autd3_common INTERFACE)
target_include_directories(autd3_common INTERFACE ${PROJECT_SOURCE_DIR}/include ${EIGEN_PATH} ${SPDLOG_INCLUDE_PATH})
target_compile_definitions(autd3_common INTERFACE EIGEN_MPL2_ONLY)
if(USE_METER)
  target_compile_definitions(autd3_common INTERFACE AUTD3_USE_METER)
endif()
if(USE_LEFT_HANDED)
  target_compile_definitions(autd3_common INTERFACE AUTD3_USE_LEFT_HANDED)
endif()
if(USE_SINGLE_FLOAT)
  target_compile_definitions(autd3_common INTERFACE AUTD3_USE_SINGLE_FLOAT)
endif()
if(AUTD3_PARALLEL_FOR)
  target_compile_definitions(autd3_common INTERFACE AUTD3_PARALLEL_FOR)
endif()

enable_cxx_compiler_flag_if_supported(autd3_common INTERFACE /bigobj)
enable_cxx_compiler_flag_if_supported(autd3_common INTERFACE /wd4819)
enable_cxx_compiler_flag_if_supported(autd3_common INTERFACE /Zc:__cplusplus)
if(NOT MSVC) # Too noisy
  enable_cxx_compiler_flag_if_supported(autd3_common INTERFACE /Wall)
endif()
enable_cxx_compiler_flag_if_supported(autd3_common INTERFACE /Wextra)
enable_cxx_compiler_flag_if_supported(autd3_common INTERFACE /Werror)

add_subdirectory(src)
add_subdirectory(tests)
add_subdirectory(examples)
add_subdirectory(capi)
add_subdirectory(dist)
add_subdirectory(bench)
