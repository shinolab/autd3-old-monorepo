/*
 * File: autd3.proto
 * Project: proto
 * Created Date: 26/06/2023
 * Author: Shun Suzuki
 * -----
 * Last Modified: 30/06/2023
 * Modified By: Shun Suzuki (suzuki@hapis.k.u-tokyo.ac.jp)
 * -----
 * Copyright (c) 2023 Shun Suzuki. All rights reserved.
 *
 */

syntax = "proto3";

package autd3;

import "utils.proto";
import "gain.proto";
import "modulation.proto";
import "special.proto";

message SilencerConfig { uint32 step = 1; }

message Datagram {
  oneof datagram {
    SilencerConfig silencer_config = 1;
    Modulation modulation = 2;
    Gain gain = 3;
    SpecialData special = 4;
  }
}

message TxRawData { bytes data = 1; }
message SendResponse { bool success = 1; }

message ReadRequest {}
message RxMessage { bytes data = 1; }

message CloseRequest {}
message CloseResponse { bool success = 1; }

message Geometry {
  message AUTD3 {
    Vector3 position = 1;
    Quaternion rotation = 2;
  }
  repeated AUTD3 geometries = 1;
}

message GeometryResponse {}

message SimulatorTx {
  oneof data {
    Geometry geometry = 1;
    TxRawData raw = 2;
    ReadRequest read = 8;
    CloseRequest close = 9;
  }
}

message SimulatorRx {
  oneof data {
    RxMessage rx = 1;
    GeometryResponse geometry = 2;
  }
}

service Simulator {
  rpc ReceiveData(stream SimulatorTx) returns (stream SimulatorRx);
}

service ECAT {
  rpc SendData(TxRawData) returns (SendResponse) {}
  rpc ReadData(ReadRequest) returns (RxMessage) {}
  rpc Close(CloseRequest) returns (CloseResponse) {}
}

message SendLightResponse {
  bool success = 1;
  bool err = 2;
  string msg = 3;
}

message GeometryLightResponse {
  bool success = 1;
  string msg = 2;
}

message CloseLightResponse { bool success = 1; }

service ECATLight {
  rpc ConfigGeomety(Geometry) returns (GeometryLightResponse) {}
  rpc Send(Datagram) returns (SendLightResponse) {}
  rpc Close(CloseRequest) returns (GeometryLightResponse) {}
}
