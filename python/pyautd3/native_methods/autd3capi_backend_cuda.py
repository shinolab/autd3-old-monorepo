# This file is autogenerated
import threading
import ctypes
import os
from .autd3capi_def import BackendPtr


class Singleton(type):
    _instances = {}  # type: ignore
    _lock = threading.Lock()

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            with cls._lock:
                if cls not in cls._instances:
                    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class NativeMethods(metaclass=Singleton):

    def init_dll(self, bin_location: str, bin_prefix: str, bin_ext: str):
        try:
            self.dll = ctypes.CDLL(os.path.join(bin_location, f'{bin_prefix}autd3capi_backend_cuda{bin_ext}'))
        except Exception:
            return

        self.dll.AUTDCUDABackend.argtypes = [ctypes.c_char_p] 
        self.dll.AUTDCUDABackend.restype = BackendPtr

    def cuda_backend(self, err: ctypes.Array[ctypes.c_char]) -> BackendPtr:
        return self.dll.AUTDCUDABackend(err)
