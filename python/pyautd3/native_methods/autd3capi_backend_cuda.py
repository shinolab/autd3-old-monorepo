# This file is autogenerated
import threading
import ctypes
import os
from .autd3capi_def import BackendPtr, ConstraintPtr, GainPtr


class Singleton(type):
    _instances = {}  # type: ignore
    _lock = threading.Lock()

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            with cls._lock:
                if cls not in cls._instances:
                    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class NativeMethods(metaclass=Singleton):

    def init_dll(self, bin_location: str, bin_prefix: str, bin_ext: str):
        try:
            self.dll = ctypes.CDLL(os.path.join(bin_location, f'{bin_prefix}autd3capi_backend_cuda{bin_ext}'))
        except Exception:
            return

        self.dll.AUTDCUDABackend.argtypes = [ctypes.c_char_p] 
        self.dll.AUTDCUDABackend.restype = BackendPtr

        self.dll.AUTDDeleteCUDABackend.argtypes = [BackendPtr]  # type: ignore 
        self.dll.AUTDDeleteCUDABackend.restype = None

        self.dll.AUTDGainHoloSDPCUDA.argtypes = [BackendPtr, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDGainHoloSDPCUDA.restype = GainPtr

        self.dll.AUTDGainHoloSDPWithConstraintCUDA.argtypes = [GainPtr, ConstraintPtr]  # type: ignore 
        self.dll.AUTDGainHoloSDPWithConstraintCUDA.restype = GainPtr

        self.dll.AUTDGainHoloSDPWithAlphaCUDA.argtypes = [GainPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDGainHoloSDPWithAlphaCUDA.restype = GainPtr

        self.dll.AUTDGainHoloSDPWithLambdaCUDA.argtypes = [GainPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDGainHoloSDPWithLambdaCUDA.restype = GainPtr

        self.dll.AUTDGainHoloSDPWithRepeatCUDA.argtypes = [GainPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainHoloSDPWithRepeatCUDA.restype = GainPtr

        self.dll.AUTDGainHoloEVPCUDA.argtypes = [BackendPtr, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDGainHoloEVPCUDA.restype = GainPtr

        self.dll.AUTDGainHoloEVPWithConstraintCUDA.argtypes = [GainPtr, ConstraintPtr]  # type: ignore 
        self.dll.AUTDGainHoloEVPWithConstraintCUDA.restype = GainPtr

        self.dll.AUTDGainHoloEVPWithGammaCUDA.argtypes = [GainPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDGainHoloEVPWithGammaCUDA.restype = GainPtr

        self.dll.AUTDGainHoloGSCUDA.argtypes = [BackendPtr, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDGainHoloGSCUDA.restype = GainPtr

        self.dll.AUTDGainHoloGSWithConstraintCUDA.argtypes = [GainPtr, ConstraintPtr]  # type: ignore 
        self.dll.AUTDGainHoloGSWithConstraintCUDA.restype = GainPtr

        self.dll.AUTDGainHoloGSWithRepeatCUDA.argtypes = [GainPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainHoloGSWithRepeatCUDA.restype = GainPtr

        self.dll.AUTDGainHoloGSPATCUDA.argtypes = [BackendPtr, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDGainHoloGSPATCUDA.restype = GainPtr

        self.dll.AUTDGainHoloGSPATWithConstraintCUDA.argtypes = [GainPtr, ConstraintPtr]  # type: ignore 
        self.dll.AUTDGainHoloGSPATWithConstraintCUDA.restype = GainPtr

        self.dll.AUTDGainHoloGSPATWithRepeatCUDA.argtypes = [GainPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainHoloGSPATWithRepeatCUDA.restype = GainPtr

        self.dll.AUTDGainHoloNaiveCUDA.argtypes = [BackendPtr, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDGainHoloNaiveCUDA.restype = GainPtr

        self.dll.AUTDGainHoloNaiveWithConstraintCUDA.argtypes = [GainPtr, ConstraintPtr]  # type: ignore 
        self.dll.AUTDGainHoloNaiveWithConstraintCUDA.restype = GainPtr

        self.dll.AUTDGainHoloGreedyCUDA.argtypes = [ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.c_uint64] 
        self.dll.AUTDGainHoloGreedyCUDA.restype = GainPtr

        self.dll.AUTDGainHoloGreedyWithConstraintCUDA.argtypes = [GainPtr, ConstraintPtr]  # type: ignore 
        self.dll.AUTDGainHoloGreedyWithConstraintCUDA.restype = GainPtr

        self.dll.AUTDGainHoloGreedyWithPhaseDivCUDA.argtypes = [GainPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainHoloGreedyWithPhaseDivCUDA.restype = GainPtr

        self.dll.AUTDGainHoloLMCUDA.argtypes = [BackendPtr, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDGainHoloLMCUDA.restype = GainPtr

        self.dll.AUTDGainHoloLMWithConstraintCUDA.argtypes = [GainPtr, ConstraintPtr]  # type: ignore 
        self.dll.AUTDGainHoloLMWithConstraintCUDA.restype = GainPtr

        self.dll.AUTDGainHoloLMWithEps1CUDA.argtypes = [GainPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDGainHoloLMWithEps1CUDA.restype = GainPtr

        self.dll.AUTDGainHoloLMWithEps2CUDA.argtypes = [GainPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDGainHoloLMWithEps2CUDA.restype = GainPtr

        self.dll.AUTDGainHoloLMWithTauCUDA.argtypes = [GainPtr, ctypes.c_double]  # type: ignore 
        self.dll.AUTDGainHoloLMWithTauCUDA.restype = GainPtr

        self.dll.AUTDGainHoloLMWithKMaxCUDA.argtypes = [GainPtr, ctypes.c_uint32]  # type: ignore 
        self.dll.AUTDGainHoloLMWithKMaxCUDA.restype = GainPtr

        self.dll.AUTDGainHoloLMWithInitialCUDA.argtypes = [GainPtr, ctypes.POINTER(ctypes.c_double), ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDGainHoloLMWithInitialCUDA.restype = GainPtr

    def cuda_backend(self, err: ctypes.Array[ctypes.c_char]) -> BackendPtr:
        return self.dll.AUTDCUDABackend(err)

    def delete_cuda_backend(self, backend: BackendPtr) -> None:
        return self.dll.AUTDDeleteCUDABackend(backend)

    def gain_holo_sdpcuda(self, backend: BackendPtr, points: ctypes.Array[ctypes.c_double], amps: ctypes.Array[ctypes.c_double], size: int) -> GainPtr:
        return self.dll.AUTDGainHoloSDPCUDA(backend, points, amps, size)

    def gain_holo_sdp_with_constraint_cuda(self, holo: GainPtr, constraint: ConstraintPtr) -> GainPtr:
        return self.dll.AUTDGainHoloSDPWithConstraintCUDA(holo, constraint)

    def gain_holo_sdp_with_alpha_cuda(self, holo: GainPtr, alpha: float) -> GainPtr:
        return self.dll.AUTDGainHoloSDPWithAlphaCUDA(holo, alpha)

    def gain_holo_sdp_with_lambda_cuda(self, holo: GainPtr, lambda_: float) -> GainPtr:
        return self.dll.AUTDGainHoloSDPWithLambdaCUDA(holo, lambda_)

    def gain_holo_sdp_with_repeat_cuda(self, holo: GainPtr, repeat: int) -> GainPtr:
        return self.dll.AUTDGainHoloSDPWithRepeatCUDA(holo, repeat)

    def gain_holo_evpcuda(self, backend: BackendPtr, points: ctypes.Array[ctypes.c_double], amps: ctypes.Array[ctypes.c_double], size: int) -> GainPtr:
        return self.dll.AUTDGainHoloEVPCUDA(backend, points, amps, size)

    def gain_holo_evp_with_constraint_cuda(self, holo: GainPtr, constraint: ConstraintPtr) -> GainPtr:
        return self.dll.AUTDGainHoloEVPWithConstraintCUDA(holo, constraint)

    def gain_holo_evp_with_gamma_cuda(self, holo: GainPtr, gamma: float) -> GainPtr:
        return self.dll.AUTDGainHoloEVPWithGammaCUDA(holo, gamma)

    def gain_holo_gscuda(self, backend: BackendPtr, points: ctypes.Array[ctypes.c_double], amps: ctypes.Array[ctypes.c_double], size: int) -> GainPtr:
        return self.dll.AUTDGainHoloGSCUDA(backend, points, amps, size)

    def gain_holo_gs_with_constraint_cuda(self, holo: GainPtr, constraint: ConstraintPtr) -> GainPtr:
        return self.dll.AUTDGainHoloGSWithConstraintCUDA(holo, constraint)

    def gain_holo_gs_with_repeat_cuda(self, holo: GainPtr, repeat: int) -> GainPtr:
        return self.dll.AUTDGainHoloGSWithRepeatCUDA(holo, repeat)

    def gain_holo_gspatcuda(self, backend: BackendPtr, points: ctypes.Array[ctypes.c_double], amps: ctypes.Array[ctypes.c_double], size: int) -> GainPtr:
        return self.dll.AUTDGainHoloGSPATCUDA(backend, points, amps, size)

    def gain_holo_gspat_with_constraint_cuda(self, holo: GainPtr, constraint: ConstraintPtr) -> GainPtr:
        return self.dll.AUTDGainHoloGSPATWithConstraintCUDA(holo, constraint)

    def gain_holo_gspat_with_repeat_cuda(self, holo: GainPtr, repeat: int) -> GainPtr:
        return self.dll.AUTDGainHoloGSPATWithRepeatCUDA(holo, repeat)

    def gain_holo_naive_cuda(self, backend: BackendPtr, points: ctypes.Array[ctypes.c_double], amps: ctypes.Array[ctypes.c_double], size: int) -> GainPtr:
        return self.dll.AUTDGainHoloNaiveCUDA(backend, points, amps, size)

    def gain_holo_naive_with_constraint_cuda(self, holo: GainPtr, constraint: ConstraintPtr) -> GainPtr:
        return self.dll.AUTDGainHoloNaiveWithConstraintCUDA(holo, constraint)

    def gain_holo_greedy_cuda(self, points: ctypes.Array[ctypes.c_double], amps: ctypes.Array[ctypes.c_double], size: int) -> GainPtr:
        return self.dll.AUTDGainHoloGreedyCUDA(points, amps, size)

    def gain_holo_greedy_with_constraint_cuda(self, holo: GainPtr, constraint: ConstraintPtr) -> GainPtr:
        return self.dll.AUTDGainHoloGreedyWithConstraintCUDA(holo, constraint)

    def gain_holo_greedy_with_phase_div_cuda(self, holo: GainPtr, div: int) -> GainPtr:
        return self.dll.AUTDGainHoloGreedyWithPhaseDivCUDA(holo, div)

    def gain_holo_lmcuda(self, backend: BackendPtr, points: ctypes.Array[ctypes.c_double], amps: ctypes.Array[ctypes.c_double], size: int) -> GainPtr:
        return self.dll.AUTDGainHoloLMCUDA(backend, points, amps, size)

    def gain_holo_lm_with_constraint_cuda(self, holo: GainPtr, constraint: ConstraintPtr) -> GainPtr:
        return self.dll.AUTDGainHoloLMWithConstraintCUDA(holo, constraint)

    def gain_holo_lm_with_eps_1_cuda(self, holo: GainPtr, eps: float) -> GainPtr:
        return self.dll.AUTDGainHoloLMWithEps1CUDA(holo, eps)

    def gain_holo_lm_with_eps_2_cuda(self, holo: GainPtr, eps: float) -> GainPtr:
        return self.dll.AUTDGainHoloLMWithEps2CUDA(holo, eps)

    def gain_holo_lm_with_tau_cuda(self, holo: GainPtr, tau: float) -> GainPtr:
        return self.dll.AUTDGainHoloLMWithTauCUDA(holo, tau)

    def gain_holo_lm_with_k_max_cuda(self, holo: GainPtr, k_max: int) -> GainPtr:
        return self.dll.AUTDGainHoloLMWithKMaxCUDA(holo, k_max)

    def gain_holo_lm_with_initial_cuda(self, holo: GainPtr, initial_ptr: ctypes.Array[ctypes.c_double], len: int) -> GainPtr:
        return self.dll.AUTDGainHoloLMWithInitialCUDA(holo, initial_ptr, len)
