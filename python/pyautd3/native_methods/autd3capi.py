# This file is autogenerated
import threading
import ctypes
import os
from typing import Any
from .autd3capi_def import *



class Singleton(type):
    _instances = {} # type: ignore
    _lock = threading.Lock()

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            with cls._lock:
                if cls not in cls._instances:
                    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class NativeMethods(metaclass=Singleton):

    def init_dll(self, bin_location: str, bin_prefix: str, bin_ext: str):
        try:
            self.dll = ctypes.CDLL(os.path.join(bin_location, f'{bin_prefix}autd3capi{bin_ext}'))
        except FileNotFoundError:
            return

        self.dll.AUTDCreateGeometryBuilder.argtypes = [] 
        self.dll.AUTDCreateGeometryBuilder.restype = ctypes.c_void_p

        self.dll.AUTDAddDevice.argtypes = [ctypes.c_void_p, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDAddDevice.restype = None

        self.dll.AUTDAddDeviceQuaternion.argtypes = [ctypes.c_void_p, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDAddDeviceQuaternion.restype = None

        self.dll.AUTDBuildGeometry.argtypes = [ctypes.c_void_p, ctypes.c_char_p] 
        self.dll.AUTDBuildGeometry.restype = ctypes.c_void_p

        self.dll.AUTDOpenController.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p] 
        self.dll.AUTDOpenController.restype = ctypes.c_void_p

        self.dll.AUTDClose.argtypes = [ctypes.c_void_p, ctypes.c_char_p] 
        self.dll.AUTDClose.restype = ctypes.c_bool

        self.dll.AUTDFreeController.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDFreeController.restype = None

        self.dll.AUTDSetReadsFPGAInfo.argtypes = [ctypes.c_void_p, ctypes.c_bool] 
        self.dll.AUTDSetReadsFPGAInfo.restype = None

        self.dll.AUTDSetForceFan.argtypes = [ctypes.c_void_p, ctypes.c_bool] 
        self.dll.AUTDSetForceFan.restype = None

        self.dll.AUTDGetSoundSpeed.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDGetSoundSpeed.restype = ctypes.c_double

        self.dll.AUTDSetSoundSpeed.argtypes = [ctypes.c_void_p, ctypes.c_double] 
        self.dll.AUTDSetSoundSpeed.restype = None

        self.dll.AUTDSetSoundSpeedFromTemp.argtypes = [ctypes.c_void_p, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDSetSoundSpeedFromTemp.restype = None

        self.dll.AUTDGetTransFrequency.argtypes = [ctypes.c_void_p, ctypes.c_uint32] 
        self.dll.AUTDGetTransFrequency.restype = ctypes.c_double

        self.dll.AUTDSetTransFrequency.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.c_double, ctypes.c_char_p] 
        self.dll.AUTDSetTransFrequency.restype = ctypes.c_bool

        self.dll.AUTDGetTransCycle.argtypes = [ctypes.c_void_p, ctypes.c_uint32] 
        self.dll.AUTDGetTransCycle.restype = ctypes.c_uint16

        self.dll.AUTDSetTransCycle.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.c_uint16, ctypes.c_char_p] 
        self.dll.AUTDSetTransCycle.restype = ctypes.c_bool

        self.dll.AUTDGetWavelength.argtypes = [ctypes.c_void_p, ctypes.c_uint32] 
        self.dll.AUTDGetWavelength.restype = ctypes.c_double

        self.dll.AUTDGetAttenuation.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDGetAttenuation.restype = ctypes.c_double

        self.dll.AUTDSetAttenuation.argtypes = [ctypes.c_void_p, ctypes.c_double] 
        self.dll.AUTDSetAttenuation.restype = None

        self.dll.AUTDGetFPGAInfo.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_uint8), ctypes.c_char_p] 
        self.dll.AUTDGetFPGAInfo.restype = ctypes.c_bool

        self.dll.AUTDNumTransducers.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDNumTransducers.restype = ctypes.c_uint32

        self.dll.AUTDNumDevices.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDNumDevices.restype = ctypes.c_uint32

        self.dll.AUTDGeometryCenter.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double)] 
        self.dll.AUTDGeometryCenter.restype = None

        self.dll.AUTDGeometryCenterOf.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double)] 
        self.dll.AUTDGeometryCenterOf.restype = None

        self.dll.AUTDTransPosition.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double)] 
        self.dll.AUTDTransPosition.restype = None

        self.dll.AUTDTransXDirection.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double)] 
        self.dll.AUTDTransXDirection.restype = None

        self.dll.AUTDTransYDirection.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double)] 
        self.dll.AUTDTransYDirection.restype = None

        self.dll.AUTDTransZDirection.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double)] 
        self.dll.AUTDTransZDirection.restype = None

        self.dll.AUTDGetTransModDelay.argtypes = [ctypes.c_void_p, ctypes.c_uint32] 
        self.dll.AUTDGetTransModDelay.restype = ctypes.c_uint16

        self.dll.AUTDSetTransModDelay.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.c_uint16] 
        self.dll.AUTDSetTransModDelay.restype = None

        self.dll.AUTDGetFirmwareInfoListPointer.argtypes = [ctypes.c_void_p, ctypes.c_char_p] 
        self.dll.AUTDGetFirmwareInfoListPointer.restype = ctypes.c_void_p

        self.dll.AUTDGetFirmwareInfo.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.c_char_p, ctypes.POINTER(ctypes.c_bool), ctypes.POINTER(ctypes.c_bool)] 
        self.dll.AUTDGetFirmwareInfo.restype = None

        self.dll.AUTDFreeFirmwareInfoListPointer.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDFreeFirmwareInfoListPointer.restype = None

        self.dll.AUTDGetLatestFirmware.argtypes = [ctypes.c_char_p] 
        self.dll.AUTDGetLatestFirmware.restype = None

        self.dll.AUTDGainNull.argtypes = [] 
        self.dll.AUTDGainNull.restype = ctypes.c_void_p

        self.dll.AUTDGainGrouped.argtypes = [] 
        self.dll.AUTDGainGrouped.restype = ctypes.c_void_p

        self.dll.AUTDGainGroupedAdd.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.c_void_p] 
        self.dll.AUTDGainGroupedAdd.restype = None

        self.dll.AUTDGainFocus.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDGainFocus.restype = ctypes.c_void_p

        self.dll.AUTDGainBesselBeam.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDGainBesselBeam.restype = ctypes.c_void_p

        self.dll.AUTDGainPlaneWave.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDGainPlaneWave.restype = ctypes.c_void_p

        self.dll.AUTDGainTransducerTest.argtypes = [] 
        self.dll.AUTDGainTransducerTest.restype = ctypes.c_void_p

        self.dll.AUTDGainTransducerTestSet.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDGainTransducerTestSet.restype = None

        self.dll.AUTDGainCustom.argtypes = [ctypes.POINTER(ctypes.c_double), ctypes.POINTER(ctypes.c_double), ctypes.c_uint64] 
        self.dll.AUTDGainCustom.restype = ctypes.c_void_p

        self.dll.AUTDDeleteGain.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDDeleteGain.restype = None

        self.dll.AUTDModulationStatic.argtypes = [ctypes.c_double] 
        self.dll.AUTDModulationStatic.restype = ctypes.c_void_p

        self.dll.AUTDModulationSine.argtypes = [ctypes.c_uint32, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDModulationSine.restype = ctypes.c_void_p

        self.dll.AUTDModulationSineSquared.argtypes = [ctypes.c_uint32, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDModulationSineSquared.restype = ctypes.c_void_p

        self.dll.AUTDModulationSineLegacy.argtypes = [ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDModulationSineLegacy.restype = ctypes.c_void_p

        self.dll.AUTDModulationSquare.argtypes = [ctypes.c_uint32, ctypes.c_double, ctypes.c_double, ctypes.c_double] 
        self.dll.AUTDModulationSquare.restype = ctypes.c_void_p

        self.dll.AUTDModulationCustom.argtypes = [ctypes.POINTER(ctypes.c_double), ctypes.c_uint64, ctypes.c_uint32] 
        self.dll.AUTDModulationCustom.restype = ctypes.c_void_p

        self.dll.AUTDModulationSamplingFrequencyDivision.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDModulationSamplingFrequencyDivision.restype = ctypes.c_uint32

        self.dll.AUTDModulationSetSamplingFrequencyDivision.argtypes = [ctypes.c_void_p, ctypes.c_uint32] 
        self.dll.AUTDModulationSetSamplingFrequencyDivision.restype = None

        self.dll.AUTDModulationSamplingFrequency.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDModulationSamplingFrequency.restype = ctypes.c_double

        self.dll.AUTDDeleteModulation.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDDeleteModulation.restype = None

        self.dll.AUTDFocusSTM.argtypes = [] 
        self.dll.AUTDFocusSTM.restype = ctypes.c_void_p

        self.dll.AUTDFocusSTMAdd.argtypes = [ctypes.c_void_p, ctypes.c_double, ctypes.c_double, ctypes.c_double, ctypes.c_uint8] 
        self.dll.AUTDFocusSTMAdd.restype = None

        self.dll.AUTDFocusSTMSetFrequency.argtypes = [ctypes.c_void_p, ctypes.c_double] 
        self.dll.AUTDFocusSTMSetFrequency.restype = ctypes.c_double

        self.dll.AUTDFocusSTMGetStartIdx.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDFocusSTMGetStartIdx.restype = ctypes.c_int32

        self.dll.AUTDFocusSTMGetFinishIdx.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDFocusSTMGetFinishIdx.restype = ctypes.c_int32

        self.dll.AUTDFocusSTMSetStartIdx.argtypes = [ctypes.c_void_p, ctypes.c_int32] 
        self.dll.AUTDFocusSTMSetStartIdx.restype = None

        self.dll.AUTDFocusSTMSetFinishIdx.argtypes = [ctypes.c_void_p, ctypes.c_int32] 
        self.dll.AUTDFocusSTMSetFinishIdx.restype = None

        self.dll.AUTDFocusSTMFrequency.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDFocusSTMFrequency.restype = ctypes.c_double

        self.dll.AUTDFocusSTMSamplingFrequency.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDFocusSTMSamplingFrequency.restype = ctypes.c_double

        self.dll.AUTDFocusSTMSamplingFrequencyDivision.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDFocusSTMSamplingFrequencyDivision.restype = ctypes.c_uint32

        self.dll.AUTDFocusSTMSetSamplingFrequencyDivision.argtypes = [ctypes.c_void_p, ctypes.c_uint32] 
        self.dll.AUTDFocusSTMSetSamplingFrequencyDivision.restype = None

        self.dll.AUTDDeleteFocusSTM.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDDeleteFocusSTM.restype = None

        self.dll.AUTDGainSTM.argtypes = [] 
        self.dll.AUTDGainSTM.restype = ctypes.c_void_p

        self.dll.AUTDGainSTMAdd.argtypes = [ctypes.c_void_p, ctypes.c_void_p] 
        self.dll.AUTDGainSTMAdd.restype = None

        self.dll.AUTDGainSTMSetMode.argtypes = [ctypes.c_void_p, GainSTMMode] # type: ignore 
        self.dll.AUTDGainSTMSetMode.restype = None

        self.dll.AUTDGainSTMSetFrequency.argtypes = [ctypes.c_void_p, ctypes.c_double] 
        self.dll.AUTDGainSTMSetFrequency.restype = ctypes.c_double

        self.dll.AUTDGainSTMGetStartIdx.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDGainSTMGetStartIdx.restype = ctypes.c_int32

        self.dll.AUTDGainSTMGetFinishIdx.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDGainSTMGetFinishIdx.restype = ctypes.c_int32

        self.dll.AUTDGainSTMSetStartIdx.argtypes = [ctypes.c_void_p, ctypes.c_int32] 
        self.dll.AUTDGainSTMSetStartIdx.restype = None

        self.dll.AUTDGainSTMSetFinishIdx.argtypes = [ctypes.c_void_p, ctypes.c_int32] 
        self.dll.AUTDGainSTMSetFinishIdx.restype = None

        self.dll.AUTDGainSTMFrequency.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDGainSTMFrequency.restype = ctypes.c_double

        self.dll.AUTDGainSTMSamplingFrequency.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDGainSTMSamplingFrequency.restype = ctypes.c_double

        self.dll.AUTDGainSTMSamplingFrequencyDivision.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDGainSTMSamplingFrequencyDivision.restype = ctypes.c_uint32

        self.dll.AUTDGainSTMSetSamplingFrequencyDivision.argtypes = [ctypes.c_void_p, ctypes.c_uint32] 
        self.dll.AUTDGainSTMSetSamplingFrequencyDivision.restype = None

        self.dll.AUTDDeleteGainSTM.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDDeleteGainSTM.restype = None

        self.dll.AUTDSynchronize.argtypes = [] 
        self.dll.AUTDSynchronize.restype = ctypes.c_void_p

        self.dll.AUTDClear.argtypes = [] 
        self.dll.AUTDClear.restype = ctypes.c_void_p

        self.dll.AUTDUpdateFlags.argtypes = [] 
        self.dll.AUTDUpdateFlags.restype = ctypes.c_void_p

        self.dll.AUTDStop.argtypes = [] 
        self.dll.AUTDStop.restype = ctypes.c_void_p

        self.dll.AUTDModDelayConfig.argtypes = [] 
        self.dll.AUTDModDelayConfig.restype = ctypes.c_void_p

        self.dll.AUTDDeleteSpecialData.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDDeleteSpecialData.restype = None

        self.dll.AUTDCreateSilencer.argtypes = [ctypes.c_uint16] 
        self.dll.AUTDCreateSilencer.restype = ctypes.c_void_p

        self.dll.AUTDDeleteSilencer.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDDeleteSilencer.restype = None

        self.dll.AUTDCreateAmplitudes.argtypes = [ctypes.c_double] 
        self.dll.AUTDCreateAmplitudes.restype = ctypes.c_void_p

        self.dll.AUTDDeleteAmplitudes.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDDeleteAmplitudes.restype = None

        self.dll.AUTDSend.argtypes = [ctypes.c_void_p, TransMode, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_int64, ctypes.c_char_p] # type: ignore 
        self.dll.AUTDSend.restype = ctypes.c_int32

        self.dll.AUTDSendSpecial.argtypes = [ctypes.c_void_p, TransMode, ctypes.c_void_p, ctypes.c_int64, ctypes.c_char_p] # type: ignore 
        self.dll.AUTDSendSpecial.restype = ctypes.c_int32

        self.dll.AUTDLinkDebug.argtypes = [] 
        self.dll.AUTDLinkDebug.restype = ctypes.c_void_p

        self.dll.AUTDLinkDebugLogLevel.argtypes = [ctypes.c_void_p, Level] # type: ignore 
        self.dll.AUTDLinkDebugLogLevel.restype = ctypes.c_void_p

        self.dll.AUTDLinkDebugLogFunc.argtypes = [ctypes.c_void_p, Level, ctypes.c_void_p, ctypes.c_void_p] # type: ignore 
        self.dll.AUTDLinkDebugLogFunc.restype = ctypes.c_void_p

        self.dll.AUTDLinkDebugTimeout.argtypes = [ctypes.c_void_p, ctypes.c_uint64] 
        self.dll.AUTDLinkDebugTimeout.restype = ctypes.c_void_p

        self.dll.AUTDLinkDebugBuild.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDLinkDebugBuild.restype = ctypes.c_void_p

    def create_geometry_builder(self) -> ctypes.c_void_p:
        return self.dll.AUTDCreateGeometryBuilder()

    def add_device(self, builder: ctypes.c_void_p, x: float, y: float, z: float, rz1: float, ry: float, rz2: float) -> None:
        return self.dll.AUTDAddDevice(builder, x, y, z, rz1, ry, rz2)

    def add_device_quaternion(self, builder: ctypes.c_void_p, x: float, y: float, z: float, qw: float, qx: float, qy: float, qz: float) -> None:
        return self.dll.AUTDAddDeviceQuaternion(builder, x, y, z, qw, qx, qy, qz)

    def build_geometry(self, builder: ctypes.c_void_p, err: ctypes.Array[ctypes.c_char]) -> ctypes.c_void_p:
        return self.dll.AUTDBuildGeometry(builder, err)

    def open_controller(self, geometry: ctypes.c_void_p, link: ctypes.c_void_p, err: ctypes.Array[ctypes.c_char]) -> ctypes.c_void_p:
        return self.dll.AUTDOpenController(geometry, link, err)

    def close(self, cnt: ctypes.c_void_p, err: ctypes.Array[ctypes.c_char]) -> ctypes.c_bool:
        return self.dll.AUTDClose(cnt, err)

    def free_controller(self, cnt: ctypes.c_void_p) -> None:
        return self.dll.AUTDFreeController(cnt)

    def set_reads_fpga_info(self, cnt: ctypes.c_void_p, value: bool) -> None:
        return self.dll.AUTDSetReadsFPGAInfo(cnt, value)

    def set_force_fan(self, cnt: ctypes.c_void_p, value: bool) -> None:
        return self.dll.AUTDSetForceFan(cnt, value)

    def get_sound_speed(self, cnt: ctypes.c_void_p) -> ctypes.c_double:
        return self.dll.AUTDGetSoundSpeed(cnt)

    def set_sound_speed(self, cnt: ctypes.c_void_p, value: float) -> None:
        return self.dll.AUTDSetSoundSpeed(cnt, value)

    def set_sound_speed_from_temp(self, cnt: ctypes.c_void_p, temp: float, k: float, r: float, m: float) -> None:
        return self.dll.AUTDSetSoundSpeedFromTemp(cnt, temp, k, r, m)

    def get_trans_frequency(self, cnt: ctypes.c_void_p, idx: int) -> ctypes.c_double:
        return self.dll.AUTDGetTransFrequency(cnt, idx)

    def set_trans_frequency(self, cnt: ctypes.c_void_p, idx: int, value: float, err: ctypes.Array[ctypes.c_char]) -> ctypes.c_bool:
        return self.dll.AUTDSetTransFrequency(cnt, idx, value, err)

    def get_trans_cycle(self, cnt: ctypes.c_void_p, idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDGetTransCycle(cnt, idx)

    def set_trans_cycle(self, cnt: ctypes.c_void_p, idx: int, value: int, err: ctypes.Array[ctypes.c_char]) -> ctypes.c_bool:
        return self.dll.AUTDSetTransCycle(cnt, idx, value, err)

    def get_wavelength(self, cnt: ctypes.c_void_p, idx: int) -> ctypes.c_double:
        return self.dll.AUTDGetWavelength(cnt, idx)

    def get_attenuation(self, cnt: ctypes.c_void_p) -> ctypes.c_double:
        return self.dll.AUTDGetAttenuation(cnt)

    def set_attenuation(self, cnt: ctypes.c_void_p, value: float) -> None:
        return self.dll.AUTDSetAttenuation(cnt, value)

    def get_fpga_info(self, cnt: ctypes.c_void_p, out: Any, err: ctypes.Array[ctypes.c_char]) -> ctypes.c_bool:
        return self.dll.AUTDGetFPGAInfo(cnt, out, err)

    def num_transducers(self, cnt: ctypes.c_void_p) -> ctypes.c_uint32:
        return self.dll.AUTDNumTransducers(cnt)

    def num_devices(self, cnt: ctypes.c_void_p) -> ctypes.c_uint32:
        return self.dll.AUTDNumDevices(cnt)

    def geometry_center(self, cnt: ctypes.c_void_p, x: Any, y: Any, z: Any) -> None:
        return self.dll.AUTDGeometryCenter(cnt, x, y, z)

    def geometry_center_of(self, cnt: ctypes.c_void_p, dev_idx: int, x: Any, y: Any, z: Any) -> None:
        return self.dll.AUTDGeometryCenterOf(cnt, dev_idx, x, y, z)

    def trans_position(self, cnt: ctypes.c_void_p, tr_idx: int, x: Any, y: Any, z: Any) -> None:
        return self.dll.AUTDTransPosition(cnt, tr_idx, x, y, z)

    def trans_x_direction(self, cnt: ctypes.c_void_p, tr_idx: int, x: Any, y: Any, z: Any) -> None:
        return self.dll.AUTDTransXDirection(cnt, tr_idx, x, y, z)

    def trans_y_direction(self, cnt: ctypes.c_void_p, tr_idx: int, x: Any, y: Any, z: Any) -> None:
        return self.dll.AUTDTransYDirection(cnt, tr_idx, x, y, z)

    def trans_z_direction(self, cnt: ctypes.c_void_p, tr_idx: int, x: Any, y: Any, z: Any) -> None:
        return self.dll.AUTDTransZDirection(cnt, tr_idx, x, y, z)

    def get_trans_mod_delay(self, cnt: ctypes.c_void_p, tr_idx: int) -> ctypes.c_uint16:
        return self.dll.AUTDGetTransModDelay(cnt, tr_idx)

    def set_trans_mod_delay(self, cnt: ctypes.c_void_p, tr_idx: int, delay: int) -> None:
        return self.dll.AUTDSetTransModDelay(cnt, tr_idx, delay)

    def get_firmware_info_list_pointer(self, cnt: ctypes.c_void_p, err: ctypes.Array[ctypes.c_char]) -> ctypes.c_void_p:
        return self.dll.AUTDGetFirmwareInfoListPointer(cnt, err)

    def get_firmware_info(self, p_info_list: ctypes.c_void_p, idx: int, info: ctypes.Array[ctypes.c_char], is_valid: Any, is_supported: Any) -> None:
        return self.dll.AUTDGetFirmwareInfo(p_info_list, idx, info, is_valid, is_supported)

    def free_firmware_info_list_pointer(self, p_info_list: ctypes.c_void_p) -> None:
        return self.dll.AUTDFreeFirmwareInfoListPointer(p_info_list)

    def get_latest_firmware(self, latest: ctypes.Array[ctypes.c_char]) -> None:
        return self.dll.AUTDGetLatestFirmware(latest)

    def gain_null(self) -> ctypes.c_void_p:
        return self.dll.AUTDGainNull()

    def gain_grouped(self) -> ctypes.c_void_p:
        return self.dll.AUTDGainGrouped()

    def gain_grouped_add(self, grouped_gain: ctypes.c_void_p, device_id: int, gain: ctypes.c_void_p) -> None:
        return self.dll.AUTDGainGroupedAdd(grouped_gain, device_id, gain)

    def gain_focus(self, x: float, y: float, z: float, amp: float) -> ctypes.c_void_p:
        return self.dll.AUTDGainFocus(x, y, z, amp)

    def gain_bessel_beam(self, x: float, y: float, z: float, nx: float, ny: float, nz: float, theta_z: float, amp: float) -> ctypes.c_void_p:
        return self.dll.AUTDGainBesselBeam(x, y, z, nx, ny, nz, theta_z, amp)

    def gain_plane_wave(self, nx: float, ny: float, nz: float, amp: float) -> ctypes.c_void_p:
        return self.dll.AUTDGainPlaneWave(nx, ny, nz, amp)

    def gain_transducer_test(self) -> ctypes.c_void_p:
        return self.dll.AUTDGainTransducerTest()

    def gain_transducer_test_set(self, trans_test: ctypes.c_void_p, id: int, phase: float, amp: float) -> None:
        return self.dll.AUTDGainTransducerTestSet(trans_test, id, phase, amp)

    def gain_custom(self, amp: Any, phase: Any, size: int) -> ctypes.c_void_p:
        return self.dll.AUTDGainCustom(amp, phase, size)

    def delete_gain(self, gain: ctypes.c_void_p) -> None:
        return self.dll.AUTDDeleteGain(gain)

    def modulation_static(self, amp: float) -> ctypes.c_void_p:
        return self.dll.AUTDModulationStatic(amp)

    def modulation_sine(self, freq: int, amp: float, offset: float) -> ctypes.c_void_p:
        return self.dll.AUTDModulationSine(freq, amp, offset)

    def modulation_sine_squared(self, freq: int, amp: float, offset: float) -> ctypes.c_void_p:
        return self.dll.AUTDModulationSineSquared(freq, amp, offset)

    def modulation_sine_legacy(self, freq: float, amp: float, offset: float) -> ctypes.c_void_p:
        return self.dll.AUTDModulationSineLegacy(freq, amp, offset)

    def modulation_square(self, freq: int, low: float, high: float, duty: float) -> ctypes.c_void_p:
        return self.dll.AUTDModulationSquare(freq, low, high, duty)

    def modulation_custom(self, amp: Any, size: int, freq_div: int) -> ctypes.c_void_p:
        return self.dll.AUTDModulationCustom(amp, size, freq_div)

    def modulation_sampling_frequency_division(self, m: ctypes.c_void_p) -> ctypes.c_uint32:
        return self.dll.AUTDModulationSamplingFrequencyDivision(m)

    def modulation_set_sampling_frequency_division(self, m: ctypes.c_void_p, freq_div: int) -> None:
        return self.dll.AUTDModulationSetSamplingFrequencyDivision(m, freq_div)

    def modulation_sampling_frequency(self, m: ctypes.c_void_p) -> ctypes.c_double:
        return self.dll.AUTDModulationSamplingFrequency(m)

    def delete_modulation(self, m: ctypes.c_void_p) -> None:
        return self.dll.AUTDDeleteModulation(m)

    def focus_stm(self) -> ctypes.c_void_p:
        return self.dll.AUTDFocusSTM()

    def focus_stm_add(self, stm: ctypes.c_void_p, x: float, y: float, z: float, shift: int) -> None:
        return self.dll.AUTDFocusSTMAdd(stm, x, y, z, shift)

    def focus_stm_set_frequency(self, stm: ctypes.c_void_p, freq: float) -> ctypes.c_double:
        return self.dll.AUTDFocusSTMSetFrequency(stm, freq)

    def focus_stm_get_start_idx(self, stm: ctypes.c_void_p) -> ctypes.c_int32:
        return self.dll.AUTDFocusSTMGetStartIdx(stm)

    def focus_stm_get_finish_idx(self, stm: ctypes.c_void_p) -> ctypes.c_int32:
        return self.dll.AUTDFocusSTMGetFinishIdx(stm)

    def focus_stm_set_start_idx(self, stm: ctypes.c_void_p, idx: int) -> None:
        return self.dll.AUTDFocusSTMSetStartIdx(stm, idx)

    def focus_stm_set_finish_idx(self, stm: ctypes.c_void_p, idx: int) -> None:
        return self.dll.AUTDFocusSTMSetFinishIdx(stm, idx)

    def focus_stm_frequency(self, stm: ctypes.c_void_p) -> ctypes.c_double:
        return self.dll.AUTDFocusSTMFrequency(stm)

    def focus_stm_sampling_frequency(self, stm: ctypes.c_void_p) -> ctypes.c_double:
        return self.dll.AUTDFocusSTMSamplingFrequency(stm)

    def focus_stm_sampling_frequency_division(self, stm: ctypes.c_void_p) -> ctypes.c_uint32:
        return self.dll.AUTDFocusSTMSamplingFrequencyDivision(stm)

    def focus_stm_set_sampling_frequency_division(self, stm: ctypes.c_void_p, freq_div: int) -> None:
        return self.dll.AUTDFocusSTMSetSamplingFrequencyDivision(stm, freq_div)

    def delete_focus_stm(self, stm: ctypes.c_void_p) -> None:
        return self.dll.AUTDDeleteFocusSTM(stm)

    def gain_stm(self) -> ctypes.c_void_p:
        return self.dll.AUTDGainSTM()

    def gain_stm_add(self, stm: ctypes.c_void_p, gain: ctypes.c_void_p) -> None:
        return self.dll.AUTDGainSTMAdd(stm, gain)

    def gain_stm_set_mode(self, stm: ctypes.c_void_p, mode: GainSTMMode) -> None:
        return self.dll.AUTDGainSTMSetMode(stm, mode)

    def gain_stm_set_frequency(self, stm: ctypes.c_void_p, freq: float) -> ctypes.c_double:
        return self.dll.AUTDGainSTMSetFrequency(stm, freq)

    def gain_stm_get_start_idx(self, stm: ctypes.c_void_p) -> ctypes.c_int32:
        return self.dll.AUTDGainSTMGetStartIdx(stm)

    def gain_stm_get_finish_idx(self, stm: ctypes.c_void_p) -> ctypes.c_int32:
        return self.dll.AUTDGainSTMGetFinishIdx(stm)

    def gain_stm_set_start_idx(self, stm: ctypes.c_void_p, idx: int) -> None:
        return self.dll.AUTDGainSTMSetStartIdx(stm, idx)

    def gain_stm_set_finish_idx(self, stm: ctypes.c_void_p, idx: int) -> None:
        return self.dll.AUTDGainSTMSetFinishIdx(stm, idx)

    def gain_stm_frequency(self, stm: ctypes.c_void_p) -> ctypes.c_double:
        return self.dll.AUTDGainSTMFrequency(stm)

    def gain_stm_sampling_frequency(self, stm: ctypes.c_void_p) -> ctypes.c_double:
        return self.dll.AUTDGainSTMSamplingFrequency(stm)

    def gain_stm_sampling_frequency_division(self, stm: ctypes.c_void_p) -> ctypes.c_uint32:
        return self.dll.AUTDGainSTMSamplingFrequencyDivision(stm)

    def gain_stm_set_sampling_frequency_division(self, stm: ctypes.c_void_p, freq_div: int) -> None:
        return self.dll.AUTDGainSTMSetSamplingFrequencyDivision(stm, freq_div)

    def delete_gain_stm(self, stm: ctypes.c_void_p) -> None:
        return self.dll.AUTDDeleteGainSTM(stm)

    def synchronize(self) -> ctypes.c_void_p:
        return self.dll.AUTDSynchronize()

    def clear(self) -> ctypes.c_void_p:
        return self.dll.AUTDClear()

    def update_flags(self) -> ctypes.c_void_p:
        return self.dll.AUTDUpdateFlags()

    def stop(self) -> ctypes.c_void_p:
        return self.dll.AUTDStop()

    def mod_delay_config(self) -> ctypes.c_void_p:
        return self.dll.AUTDModDelayConfig()

    def delete_special_data(self, special: ctypes.c_void_p) -> None:
        return self.dll.AUTDDeleteSpecialData(special)

    def create_silencer(self, step: int) -> ctypes.c_void_p:
        return self.dll.AUTDCreateSilencer(step)

    def delete_silencer(self, silencer: ctypes.c_void_p) -> None:
        return self.dll.AUTDDeleteSilencer(silencer)

    def create_amplitudes(self, amp: float) -> ctypes.c_void_p:
        return self.dll.AUTDCreateAmplitudes(amp)

    def delete_amplitudes(self, amplitudes: ctypes.c_void_p) -> None:
        return self.dll.AUTDDeleteAmplitudes(amplitudes)

    def send(self, cnt: ctypes.c_void_p, mode: TransMode, header: ctypes.c_void_p, body: ctypes.c_void_p, timeout_ns: int, err: ctypes.Array[ctypes.c_char]) -> ctypes.c_int32:
        return self.dll.AUTDSend(cnt, mode, header, body, timeout_ns, err)

    def send_special(self, cnt: ctypes.c_void_p, mode: TransMode, special: ctypes.c_void_p, timeout_ns: int, err: ctypes.Array[ctypes.c_char]) -> ctypes.c_int32:
        return self.dll.AUTDSendSpecial(cnt, mode, special, timeout_ns, err)

    def link_debug(self) -> ctypes.c_void_p:
        return self.dll.AUTDLinkDebug()

    def link_debug_log_level(self, builder: ctypes.c_void_p, level: Level) -> ctypes.c_void_p:
        return self.dll.AUTDLinkDebugLogLevel(builder, level)

    def link_debug_log_func(self, builder: ctypes.c_void_p, level: Level, out_func: ctypes.c_void_p, flush_func: ctypes.c_void_p) -> ctypes.c_void_p:
        return self.dll.AUTDLinkDebugLogFunc(builder, level, out_func, flush_func)

    def link_debug_timeout(self, builder: ctypes.c_void_p, timeout_ns: int) -> ctypes.c_void_p:
        return self.dll.AUTDLinkDebugTimeout(builder, timeout_ns)

    def link_debug_build(self, builder: ctypes.c_void_p) -> ctypes.c_void_p:
        return self.dll.AUTDLinkDebugBuild(builder)
