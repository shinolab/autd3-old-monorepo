# This file is autogenerated
import threading
import ctypes
import os
from .autd3capi_def import LinkPtr


class Singleton(type):
    _instances = {}  # type: ignore
    _lock = threading.Lock()

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            with cls._lock:
                if cls not in cls._instances:
                    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class NativeMethods(metaclass=Singleton):

    def init_dll(self, bin_location: str, bin_prefix: str, bin_ext: str):
        try:
            self.dll = ctypes.CDLL(os.path.join(bin_location, f'{bin_prefix}autd3capi_link_simulator{bin_ext}'))
        except Exception:
            return

        self.dll.AUTDLinkSimulator.argtypes = [ctypes.c_uint16] 
        self.dll.AUTDLinkSimulator.restype = LinkPtr

        self.dll.AUTDLinkSimulatorAddr.argtypes = [LinkPtr, ctypes.c_char_p, ctypes.c_char_p]  # type: ignore 
        self.dll.AUTDLinkSimulatorAddr.restype = LinkPtr

        self.dll.AUTDLinkSimulatorTimeout.argtypes = [LinkPtr, ctypes.c_uint64]  # type: ignore 
        self.dll.AUTDLinkSimulatorTimeout.restype = LinkPtr

    def link_simulator(self, port: int) -> LinkPtr:
        return self.dll.AUTDLinkSimulator(port)

    def link_simulator_addr(self, simulator: LinkPtr, addr: bytes, err: ctypes.Array[ctypes.c_char]) -> LinkPtr:
        return self.dll.AUTDLinkSimulatorAddr(simulator, addr, err)

    def link_simulator_timeout(self, simulator: LinkPtr, timeout_ns: int) -> LinkPtr:
        return self.dll.AUTDLinkSimulatorTimeout(simulator, timeout_ns)
