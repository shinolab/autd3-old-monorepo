# This file is autogenerated
import threading
import ctypes
import os
from typing import Any
from .autd3capi_def import *
from enum import IntEnum

class SyncMode(IntEnum):
    FreeRun = 0
    DC = 1

    @classmethod
    def from_param(cls, obj):
        return int(obj)




class Singleton(type):
    _instances = {} # type: ignore
    _lock = threading.Lock()

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            with cls._lock:
                if cls not in cls._instances:
                    cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class NativeMethods(metaclass=Singleton):

    def init_dll(self, bin_location: str, bin_prefix: str, bin_ext: str):
        try:
            self.dll = ctypes.CDLL(os.path.join(bin_location, f'{bin_prefix}autd3capi_link_soem{bin_ext}'))
        except FileNotFoundError:
            return

        self.dll.AUTDGetAdapterPointer.argtypes = [ctypes.POINTER(ctypes.c_uint32)] 
        self.dll.AUTDGetAdapterPointer.restype = ctypes.c_void_p

        self.dll.AUTDGetAdapter.argtypes = [ctypes.c_void_p, ctypes.c_uint32, ctypes.c_char_p, ctypes.c_char_p] 
        self.dll.AUTDGetAdapter.restype = None

        self.dll.AUTDFreeAdapterPointer.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDFreeAdapterPointer.restype = None

        self.dll.AUTDLinkSOEM.argtypes = [] 
        self.dll.AUTDLinkSOEM.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMSendCycle.argtypes = [ctypes.c_void_p, ctypes.c_uint16] 
        self.dll.AUTDLinkSOEMSendCycle.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMSync0Cycle.argtypes = [ctypes.c_void_p, ctypes.c_uint16] 
        self.dll.AUTDLinkSOEMSync0Cycle.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMBufSize.argtypes = [ctypes.c_void_p, ctypes.c_uint32] 
        self.dll.AUTDLinkSOEMBufSize.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMTimerStrategy.argtypes = [ctypes.c_void_p, TimerStrategy] # type: ignore 
        self.dll.AUTDLinkSOEMTimerStrategy.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMSyncMode.argtypes = [ctypes.c_void_p, SyncMode] # type: ignore 
        self.dll.AUTDLinkSOEMSyncMode.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMIfname.argtypes = [ctypes.c_void_p, ctypes.c_char_p] 
        self.dll.AUTDLinkSOEMIfname.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMStateCheckInterval.argtypes = [ctypes.c_void_p, ctypes.c_uint32] 
        self.dll.AUTDLinkSOEMStateCheckInterval.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMOnLost.argtypes = [ctypes.c_void_p, ctypes.c_void_p] 
        self.dll.AUTDLinkSOEMOnLost.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMLogLevel.argtypes = [ctypes.c_void_p, Level] # type: ignore 
        self.dll.AUTDLinkSOEMLogLevel.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMLogFunc.argtypes = [ctypes.c_void_p, Level, ctypes.c_void_p, ctypes.c_void_p] # type: ignore 
        self.dll.AUTDLinkSOEMLogFunc.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMTimeout.argtypes = [ctypes.c_void_p, ctypes.c_uint64] 
        self.dll.AUTDLinkSOEMTimeout.restype = ctypes.c_void_p

        self.dll.AUTDLinkSOEMBuild.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDLinkSOEMBuild.restype = ctypes.c_void_p

        self.dll.AUTDLinkRemoteSOEM.argtypes = [ctypes.c_char_p, ctypes.c_uint16] 
        self.dll.AUTDLinkRemoteSOEM.restype = ctypes.c_void_p

        self.dll.AUTDLinkRemoteSOEMTimeout.argtypes = [ctypes.c_void_p, ctypes.c_uint64] 
        self.dll.AUTDLinkRemoteSOEMTimeout.restype = ctypes.c_void_p

        self.dll.AUTDLinkRemoteSOEMBuild.argtypes = [ctypes.c_void_p] 
        self.dll.AUTDLinkRemoteSOEMBuild.restype = ctypes.c_void_p

    def get_adapter_pointer(self, len: Any) -> ctypes.c_void_p:
        return self.dll.AUTDGetAdapterPointer(len)

    def get_adapter(self, adapters: ctypes.c_void_p, idx: int, desc: ctypes.Array[ctypes.c_char], name: ctypes.Array[ctypes.c_char]) -> None:
        return self.dll.AUTDGetAdapter(adapters, idx, desc, name)

    def free_adapter_pointer(self, adapters: ctypes.c_void_p) -> None:
        return self.dll.AUTDFreeAdapterPointer(adapters)

    def link_soem(self) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEM()

    def link_soem_send_cycle(self, builder: ctypes.c_void_p, cycle: int) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMSendCycle(builder, cycle)

    def link_soem_sync_0_cycle(self, builder: ctypes.c_void_p, cycle: int) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMSync0Cycle(builder, cycle)

    def link_soem_buf_size(self, builder: ctypes.c_void_p, buf_size: int) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMBufSize(builder, buf_size)

    def link_soem_timer_strategy(self, builder: ctypes.c_void_p, timer_strategy: TimerStrategy) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMTimerStrategy(builder, timer_strategy)

    def link_soem_sync_mode(self, builder: ctypes.c_void_p, mode: SyncMode) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMSyncMode(builder, mode)

    def link_soem_ifname(self, builder: ctypes.c_void_p, ifname: bytes) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMIfname(builder, ifname)

    def link_soem_state_check_interval(self, builder: ctypes.c_void_p, interval_ms: int) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMStateCheckInterval(builder, interval_ms)

    def link_soem_on_lost(self, builder: ctypes.c_void_p, on_lost_func: ctypes.c_void_p) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMOnLost(builder, on_lost_func)

    def link_soem_log_level(self, builder: ctypes.c_void_p, level: Level) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMLogLevel(builder, level)

    def link_soem_log_func(self, builder: ctypes.c_void_p, level: Level, out_func: ctypes.c_void_p, flush_func: ctypes.c_void_p) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMLogFunc(builder, level, out_func, flush_func)

    def link_soem_timeout(self, builder: ctypes.c_void_p, timeout_ns: int) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMTimeout(builder, timeout_ns)

    def link_soem_build(self, builder: ctypes.c_void_p) -> ctypes.c_void_p:
        return self.dll.AUTDLinkSOEMBuild(builder)

    def link_remote_soem(self, addr: bytes, port: int) -> ctypes.c_void_p:
        return self.dll.AUTDLinkRemoteSOEM(addr, port)

    def link_remote_soem_timeout(self, builder: ctypes.c_void_p, timeout_ns: int) -> ctypes.c_void_p:
        return self.dll.AUTDLinkRemoteSOEMTimeout(builder, timeout_ns)

    def link_remote_soem_build(self, builder: ctypes.c_void_p) -> ctypes.c_void_p:
        return self.dll.AUTDLinkRemoteSOEMBuild(builder)
